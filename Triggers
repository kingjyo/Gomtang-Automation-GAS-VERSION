/**
 * 자동 실행 트리거 설정
 * Triggers.gs
 */

/**
 * 트리거 설정 (메뉴에서 실행)
 */
function setupTriggers() {
  try {
    // 기존 트리거 제거 (권한 문제로 인해 try-catch 처리)
    try {
      removeTriggers();
    } catch (permissionError) {
      console.log('기존 트리거 확인 권한 없음, 새 트리거만 생성:', permissionError.toString());
    }
    
    // 매일 오후 2시 실행 트리거 생성
    const trigger = ScriptApp.newTrigger('dailyUpdate')
      .timeBased()
      .everyDays(1)
      .atHour(14) // 오후 2시
      .create();
    
    console.log('새 트리거 생성됨:', trigger.getUniqueId());
    
    SpreadsheetApp.getUi().alert('✅ 완전한 자동화 설정 완료!\n\n🔄 매일 오후 2시 실행 과정:\n1️⃣ 싸이버스카이 데이터 수집\n2️⃣ EDI 데이터 처리 (1~3:30시 사이)\n3️⃣ 데이터 가공 및 검산\n4️⃣ 품목별 시트 생성\n5️⃣ 자동 이메일 전송\n\n📧 이메일이 자동으로 발송됩니다!\n\n참고: 기존 트리거가 있다면 Google Apps Script 편집기에서 수동으로 삭제해주세요.');
    
  } catch (error) {
    console.error('트리거 설정 실패:', error);
    SpreadsheetApp.getUi().alert('❌ 트리거 설정 실패: ' + error.toString() + '\n\nGoogle Apps Script 편집기에서 직접 트리거를 설정해보세요.');
  }
}

/**
 * 트리거 제거 (권한이 있는 경우에만)
 */
function removeTriggers() {
  try {
    const triggers = ScriptApp.getProjectTriggers();
    let removedCount = 0;
    
    triggers.forEach(trigger => {
      if (trigger.getHandlerFunction() === 'dailyUpdate') {
        ScriptApp.deleteTrigger(trigger);
        removedCount++;
        console.log('트리거 삭제됨:', trigger.getUniqueId());
      }
    });
    
    console.log(`총 ${removedCount}개의 기존 트리거 삭제 완료`);
    return { success: true, removedCount };
    
  } catch (error) {
    console.error('트리거 제거 실패 (권한 부족 가능성):', error.toString());
    throw error; // 상위 함수에서 처리하도록
  }
}

/**
 * 수동으로 트리거 제거 (메뉴에서 실행 가능)
 */
function manualRemoveTriggers() {
  try {
    const result = removeTriggers();
    SpreadsheetApp.getUi().alert(`✅ 트리거 제거 완료!\n삭제된 트리거: ${result.removedCount}개`);
  } catch (error) {
    SpreadsheetApp.getUi().alert(`❌ 트리거 제거 실패: ${error.toString()}\n\nGoogle Apps Script 편집기 → 왼쪽 사이드바 → 트리거(⏰) 메뉴에서 수동으로 삭제해주세요.`);
  }
}

/**
 * 매일 실행되는 함수
 */
function dailyUpdate() {
  try {
    // 설정 초기화
    initializeConfig();
    
    // 싸이버스카이 데이터 업데이트
    const result = CyberskyData.updateCyberskyData();
    
    if (result.success) {
      // 로그 기록
      logUpdate('싸이버스카이 자동 업데이트 성공', result);
      
      // EDI 데이터도 확인
      checkAndUpdateEDI();
    } else {
      logUpdate('싸이버스카이 자동 업데이트 실패', result);
    }
    
  } catch (error) {
    logUpdate('자동 업데이트 오류', { error: error.toString() });
  }
}

/**
 * EDI 데이터 확인 및 전체 자동화 파이프라인 실행
 */
function checkAndUpdateEDI() {
  try {
    const now = new Date();
    const hours = now.getHours();
    const minutes = now.getMinutes();
    
    // 오후 1시 ~ 3시 30분 사이면 EDI 확인 및 전체 파이프라인 실행
    if ((hours === 13) || (hours === 14) || (hours === 15 && minutes <= 30)) {
      logUpdate('전체 자동화 파이프라인 시작', { success: true, time: now.toLocaleString('ko-KR') });
      
      // 1. EDI 데이터 업데이트
      const ediResult = EDIData.updateEDIData();
      logUpdate('EDI 데이터 업데이트', ediResult);
      
      if (ediResult.success) {
        // 2. 데이터 처리 (A+B → C 시트)
        const processResult = DataProcessor.processData();
        logUpdate('데이터 처리 (A+B→C)', processResult);
        
        if (processResult.success) {
          // 3. 검산 실행
          const verifyResult = Verification.runVerification();
          logUpdate('검산 실행', verifyResult);
          
          // 4. 품목별 분할 (선택적)
          try {
            const splitResult = ProductSpliter.splitByProduct();
            logUpdate('품목별 분할', splitResult);
          } catch (splitError) {
            logUpdate('품목별 분할 (선택적)', { success: false, error: splitError.toString() });
          }
          
          // 5. 완전한 파이프라인 실행 (데이터 가공 → 이메일 전송)
          executeFullAutomationPipeline();
        }
      } else {
        // EDI 실패해도 기본 데이터 처리 시도
        logUpdate('EDI 없이 기본 데이터 처리 시도', { success: true });
        executeBasicAutomationPipeline();
      }
    } else {
      // 시간대가 아니면 기본 데이터 처리만
      logUpdate('EDI 시간대 아님 - 기본 처리만 실행', { success: true, time: now.toLocaleString('ko-KR') });
      executeBasicAutomationPipeline();
    }
    
  } catch (error) {
    logUpdate('자동화 파이프라인 오류', { success: false, error: error.toString() });
  }
}

/**
 * 완전한 자동화 파이프라인 실행 (EDI 포함)
 */
function executeFullAutomationPipeline() {
  try {
    logUpdate('완전한 자동화 파이프라인 실행 시작', { success: true });
    
    // 1. 품목별 시트 생성 및 엑셀 다운로드
    const downloadResult = ProductDownloader.downloadProductSheets();
    logUpdate('품목별 시트 다운로드', downloadResult);
    
    if (downloadResult.success) {
      // 2. 자동 이메일 전송
      const emailResult = sendEmailWithProductSheets();
      logUpdate('자동 이메일 전송', emailResult);
      
      if (emailResult.success) {
        logUpdate('🎉 완전한 자동화 파이프라인 성공!', { 
          success: true, 
          completedSteps: ['데이터수집', 'EDI처리', '데이터가공', '검산', '품목별생성', '이메일전송'] 
        });
      } else {
        logUpdate('이메일 전송 실패하지만 데이터 처리는 완료', emailResult);
      }
    } else {
      logUpdate('품목별 시트 생성 실패', downloadResult);
    }
    
  } catch (error) {
    logUpdate('완전한 자동화 파이프라인 오류', { success: false, error: error.toString() });
  }
}

/**
 * 기본 자동화 파이프라인 실행 (EDI 없이)
 */
function executeBasicAutomationPipeline() {
  try {
    logUpdate('기본 자동화 파이프라인 실행 시작', { success: true });
    
    // 1. 기본 데이터 처리 시도
    const processResult = DataProcessor.processData();
    logUpdate('기본 데이터 처리', processResult);
    
    // 2. 검산 (선택적)
    try {
      const verifyResult = Verification.runVerification();
      logUpdate('기본 검산', verifyResult);
    } catch (verifyError) {
      logUpdate('기본 검산 (선택적)', { success: false, error: verifyError.toString() });
    }
    
    // 3. 싸이버스카이 데이터만으로 이메일 전송 시도
    try {
      const emailResult = sendEmailWithProductSheets();
      logUpdate('기본 이메일 전송 (싸이버스카이만)', emailResult);
      
      if (emailResult.success) {
        logUpdate('✅ 기본 자동화 파이프라인 성공!', { 
          success: true, 
          completedSteps: ['데이터수집', '기본가공', '이메일전송'] 
        });
      }
    } catch (emailError) {
      logUpdate('기본 이메일 전송 실패', { success: false, error: emailError.toString() });
    }
    
  } catch (error) {
    logUpdate('기본 자동화 파이프라인 오류', { success: false, error: error.toString() });
  }
}

/**
 * 업데이트 로그 기록
 */
function logUpdate(message, details) {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  let logSheet = spreadsheet.getSheetByName('업데이트_로그');
  
  // 로그 시트가 없으면 생성
  if (!logSheet) {
    logSheet = spreadsheet.insertSheet('업데이트_로그');
    const headers = ['일시', '작업', '상태', '상세내용'];
    logSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    logSheet.getRange(1, 1, 1, headers.length)
      .setBackground('#f0f0f0')
      .setFontWeight('bold');
  }
  
  // 로그 추가
  const timestamp = new Date();
  const status = details.success ? '성공' : '실패';
  const detailsJson = JSON.stringify(details);
  
  const newRow = [timestamp, message, status, detailsJson];
  logSheet.appendRow(newRow);
  
  // 오래된 로그 정리 (최근 100개만 유지)
  const lastRow = logSheet.getLastRow();
  if (lastRow > 101) {
    logSheet.deleteRows(2, lastRow - 101);
  }
}

/**
 * 수동 테스트 실행
 */
function testDailyUpdate() {
  try {
    console.log('=== 수동 테스트 실행 시작 ===');
    dailyUpdate();
    
    // 실행 결과 확인
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const logSheet = spreadsheet.getSheetByName('업데이트_로그');
    
    let resultMessage = '테스트 실행 완료!\n업데이트_로그 시트에서 결과를 확인하세요.';
    
    if (logSheet) {
      const lastRow = logSheet.getLastRow();
      if (lastRow > 1) {
        const lastEntry = logSheet.getRange(lastRow, 1, 1, 4).getValues()[0];
        const [timestamp, action, status, details] = lastEntry;
        resultMessage += `\n\n최근 로그:\n시간: ${timestamp}\n작업: ${action}\n상태: ${status}`;
      }
    }
    
    SpreadsheetApp.getUi().alert(resultMessage);
    console.log('=== 수동 테스트 완료 ===');
    
  } catch (error) {
    console.error('테스트 실행 오류:', error);
    SpreadsheetApp.getUi().alert('❌ 테스트 실행 실패: ' + error.toString());
  }
}

/**
 * 즉시 테스트 (시간 무관)
 */
function immediateTest() {
  try {
    console.log('=== 즉시 테스트 시작 ===');
    
    // 설정 초기화
    initializeConfig();
    
    // 현재 시간 표시
    const now = new Date();
    console.log('현재 시간:', now.toLocaleString('ko-KR'));
    
    // 싸이버스카이 데이터 업데이트 시도
    const cyberskyResult = CyberskyData.updateCyberskyData();
    console.log('싸이버스카이 결과:', cyberskyResult);
    
    // 결과 로깅
    logUpdate('수동 즉시 테스트', cyberskyResult);
    
    // UI 알림
    const message = cyberskyResult.success 
      ? `✅ 즉시 테스트 성공!\n시트: ${cyberskyResult.sheetName}\n행 수: ${cyberskyResult.rowCount}` 
      : `❌ 즉시 테스트 실패:\n${cyberskyResult.error}`;
      
    SpreadsheetApp.getUi().alert(message);
    
  } catch (error) {
    console.error('즉시 테스트 오류:', error);
    logUpdate('즉시 테스트 오류', { success: false, error: error.toString() });
    SpreadsheetApp.getUi().alert('❌ 즉시 테스트 오류: ' + error.toString());
  }
}

/**
 * 날짜 지정 테스트 (과거 데이터 테스트용)
 */
function testWithDate() {
  try {
    const ui = SpreadsheetApp.getUi();
    
    // 사용자에게 날짜 입력 요청
    const response = ui.prompt(
      '📅 날짜 지정 테스트',
      '테스트할 날짜를 입력하세요:\n\n형식: MMDD (예: 0728, 0810)\n또는 YYYYMMDD (예: 20240728)',
      ui.ButtonSet.OK_CANCEL
    );
    
    if (response.getSelectedButton() === ui.Button.CANCEL) {
      return;
    }
    
    const inputDate = response.getResponseText().trim();
    if (!inputDate) {
      ui.alert('❌ 날짜를 입력해주세요.');
      return;
    }
    
    console.log('=== 날짜 지정 테스트 시작 ===');
    console.log('입력 날짜:', inputDate);
    
    // 설정 초기화
    initializeConfig();
    
    // 현재 시간 표시
    const now = new Date();
    console.log('현재 시간:', now.toLocaleString('ko-KR'));
    
    // 지정 날짜로 싸이버스카이 데이터 업데이트 시도
    const cyberskyResult = CyberskyData.updateCyberskyDataForDate(inputDate);
    console.log('싸이버스카이 결과:', cyberskyResult);
    
    // 결과 로깅
    logUpdate(`날짜 지정 테스트 (${inputDate})`, cyberskyResult);
    
    // UI 알림
    const message = cyberskyResult.success 
      ? `✅ 날짜 지정 테스트 성공!\n날짜: ${inputDate}\n시트: ${cyberskyResult.sheetName}\n행 수: ${cyberskyResult.rowCount}` 
      : `❌ 날짜 지정 테스트 실패:\n날짜: ${inputDate}\n오류: ${cyberskyResult.error}`;
      
    ui.alert(message);
    
  } catch (error) {
    console.error('날짜 지정 테스트 오류:', error);
    logUpdate('날짜 지정 테스트 오류', { success: false, error: error.toString() });
    SpreadsheetApp.getUi().alert('❌ 날짜 지정 테스트 오류: ' + error.toString());
  }
}

/**
 * 완전 자동화 파이프라인 트리거 설정 (이메일까지 포함)
 */
function setupCompleteAutomationTrigger() {
  try {
    // 기존 완전 자동화 트리거 제거 (권한 문제로 인해 try-catch 처리)
    try {
      removeCompleteAutomationTriggers();
    } catch (permissionError) {
      console.log('기존 완전 자동화 트리거 확인 권한 없음, 새 트리거만 생성:', permissionError.toString());
    }
    
    // 매일 오후 2시 30분 실행 트리거 생성 (기본 트리거보다 30분 늦게)
    const trigger = ScriptApp.newTrigger('completeAutomationPipeline')
      .timeBased()
      .everyDays(1)
      .atHour(14)
      .nearMinute(30) // 2시 30분
      .create();
    
    console.log('새 완전 자동화 트리거 생성됨:', trigger.getUniqueId());
    
    SpreadsheetApp.getUi().alert(
      '✅ 완전 자동화 트리거 설정 완료!\n\n' +
      '🔄 매일 오후 2시 30분 실행 과정:\n' +
      '1️⃣ 싸이버스카이 데이터 수집\n' +
      '2️⃣ EDI 데이터 처리\n' +
      '3️⃣ 데이터 가공 및 검산\n' +
      '4️⃣ 품목별 시트 생성\n' +
      '5️⃣ 엑셀 파일 생성\n' +
      '6️⃣ 자동 이메일 전송\n\n' +
      '📧 모든 과정이 자동으로 실행되어 이메일이 발송됩니다!\n\n' +
      '⚠️ 참고: 기존 트리거가 있다면 Google Apps Script 편집기에서 수동으로 삭제해주세요.'
    );
    
  } catch (error) {
    console.error('완전 자동화 트리거 설정 실패:', error);
    SpreadsheetApp.getUi().alert('❌ 완전 자동화 트리거 설정 실패: ' + error.toString() + '\n\nGoogle Apps Script 편집기에서 직접 트리거를 설정해보세요.');
  }
}

/**
 * 완전 자동화 트리거 제거 (권한이 있는 경우에만)
 */
function removeCompleteAutomationTriggers() {
  try {
    const triggers = ScriptApp.getProjectTriggers();
    let removedCount = 0;
    
    triggers.forEach(trigger => {
      if (trigger.getHandlerFunction() === 'completeAutomationPipeline') {
        ScriptApp.deleteTrigger(trigger);
        removedCount++;
        console.log('완전 자동화 트리거 삭제됨:', trigger.getUniqueId());
      }
    });
    
    console.log(`총 ${removedCount}개의 기존 완전 자동화 트리거 삭제 완료`);
    return { success: true, removedCount };
    
  } catch (error) {
    console.error('완전 자동화 트리거 제거 실패 (권한 부족 가능성):', error.toString());
    throw error; // 상위 함수에서 처리하도록
  }
}

/**
 * 완전 자동화 파이프라인 실행 함수 (트리거용)
 */
function completeAutomationPipeline() {
  try {
    console.log('=== 완전 자동화 파이프라인 시작 ===');
    logUpdate('🚀 완전 자동화 파이프라인 시작', { success: true, time: new Date().toLocaleString('ko-KR') });
    
    // 설정 초기화
    initializeConfig();
    
    // 1. 싸이버스카이 데이터 업데이트
    const cyberskyResult = CyberskyData.updateCyberskyData();
    logUpdate('1️⃣ 싸이버스카이 데이터 업데이트', cyberskyResult);
    
    if (!cyberskyResult.success) {
      logUpdate('⚠️ 완전 자동화 파이프라인 중단: 싸이버스카이 데이터 실패', cyberskyResult);
      return;
    }
    
    // 2. EDI 데이터 업데이트
    const ediResult = EDIData.updateEDIData();
    logUpdate('2️⃣ EDI 데이터 업데이트', ediResult);
    
    // EDI 실패해도 계속 진행 (싸이버스카이 데이터만으로도 처리 가능)
    
    // 3. 데이터 처리 (A+B → C 시트)
    const processResult = DataProcessor.processData();
    logUpdate('3️⃣ 데이터 처리 (A+B→C)', processResult);
    
    if (!processResult.success) {
      logUpdate('⚠️ 완전 자동화 파이프라인 중단: 데이터 처리 실패', processResult);
      return;
    }
    
    // 4. 검산 실행
    const verifyResult = Verification.runVerification();
    logUpdate('4️⃣ 검산 실행', verifyResult);
    
    // 5. 품목별 분할
    try {
      const splitResult = ProductSpliter.splitByProduct();
      logUpdate('5️⃣ 품목별 분할', splitResult);
    } catch (splitError) {
      logUpdate('5️⃣ 품목별 분할 (선택적)', { success: false, error: splitError.toString() });
    }
    
    // 6. 품목별 시트 생성 및 엑셀 다운로드
    const downloadResult = ProductDownloader.downloadProductSheets();
    logUpdate('6️⃣ 품목별 엑셀 생성', downloadResult);
    
    if (!downloadResult.success) {
      logUpdate('⚠️ 완전 자동화 파이프라인 중단: 엑셀 생성 실패', downloadResult);
      return;
    }
    
    // 7. 자동 이메일 전송
    const emailResult = sendEmailWithProductSheets();
    logUpdate('7️⃣ 자동 이메일 전송', emailResult);
    
    if (emailResult.success) {
      logUpdate('🎉 완전 자동화 파이프라인 성공!', {
        success: true,
        completedSteps: [
          '싸이버스카이수집',
          'EDI처리',
          '데이터가공',
          '검산',
          '품목별생성',
          '엑셀생성',
          '이메일전송'
        ],
        time: new Date().toLocaleString('ko-KR')
      });
    } else {
      logUpdate('⚠️ 이메일 전송 실패하지만 데이터 처리는 완료', emailResult);
    }
    
  } catch (error) {
    console.error('완전 자동화 파이프라인 오류:', error);
    logUpdate('❌ 완전 자동화 파이프라인 오류', { success: false, error: error.toString() });
  }
}

/**
 * 수동으로 완전 자동화 파이프라인 실행 (메뉴용)
 */
function manualCompleteAutomation() {
  try {
    const ui = SpreadsheetApp.getUi();
    const response = ui.alert(
      '🚀 완전 자동화 실행',
      '전체 파이프라인을 실행하시겠습니까?\n\n' +
      '실행 과정:\n' +
      '• 싸이버스카이 데이터 수집\n' +
      '• EDI 데이터 처리\n' +
      '• 데이터 가공 및 검산\n' +
      '• 품목별 시트 생성\n' +
      '• 엑셀 파일 생성\n' +
      '• 자동 이메일 전송\n\n' +
      '⚠️ 이 작업은 시간이 걸릴 수 있습니다.',
      ui.ButtonSet.YES_NO
    );
    
    if (response === ui.Button.YES) {
      ui.alert('🔄 완전 자동화 파이프라인을 시작합니다.\n업데이트_로그 시트에서 진행상황을 확인하세요.');
      completeAutomationPipeline();
    }
    
  } catch (error) {
    console.error('수동 완전 자동화 실행 오류:', error);
    SpreadsheetApp.getUi().alert('❌ 실행 오류: ' + error.toString());
  }
}
