/**
 * 자동 실행 트리거 설정
 * Triggers.gs
 */

/**
 * 트리거 설정 (메뉴에서 실행)
 */
function setupTriggers() {
  try {
    // 기존 트리거 제거 (권한 문제로 인해 try-catch 처리)
    try {
      removeTriggers();
    } catch (permissionError) {
      console.log('기존 트리거 확인 권한 없음, 새 트리거만 생성:', permissionError.toString());
    }
    
    // 매일 오후 2시 실행 트리거 생성
    const trigger = ScriptApp.newTrigger('dailyUpdate')
      .timeBased()
      .everyDays(1)
      .atHour(14) // 오후 2시
      .create();
    
    console.log('새 트리거 생성됨:', trigger.getUniqueId());
    
    SpreadsheetApp.getUi().alert('✅ 자동 실행 설정 완료!\n매일 오후 2시에 싸이버스카이 데이터가 자동으로 업데이트됩니다.\n\n참고: 기존 트리거가 있다면 Google Apps Script 편집기에서 수동으로 삭제해주세요.');
    
  } catch (error) {
    console.error('트리거 설정 실패:', error);
    SpreadsheetApp.getUi().alert('❌ 트리거 설정 실패: ' + error.toString() + '\n\nGoogle Apps Script 편집기에서 직접 트리거를 설정해보세요.');
  }
}

/**
 * 트리거 제거 (권한이 있는 경우에만)
 */
function removeTriggers() {
  try {
    const triggers = ScriptApp.getProjectTriggers();
    let removedCount = 0;
    
    triggers.forEach(trigger => {
      if (trigger.getHandlerFunction() === 'dailyUpdate') {
        ScriptApp.deleteTrigger(trigger);
        removedCount++;
        console.log('트리거 삭제됨:', trigger.getUniqueId());
      }
    });
    
    console.log(`총 ${removedCount}개의 기존 트리거 삭제 완료`);
    return { success: true, removedCount };
    
  } catch (error) {
    console.error('트리거 제거 실패 (권한 부족 가능성):', error.toString());
    throw error; // 상위 함수에서 처리하도록
  }
}

/**
 * 수동으로 트리거 제거 (메뉴에서 실행 가능)
 */
function manualRemoveTriggers() {
  try {
    const result = removeTriggers();
    SpreadsheetApp.getUi().alert(`✅ 트리거 제거 완료!\n삭제된 트리거: ${result.removedCount}개`);
  } catch (error) {
    SpreadsheetApp.getUi().alert(`❌ 트리거 제거 실패: ${error.toString()}\n\nGoogle Apps Script 편집기 → 왼쪽 사이드바 → 트리거(⏰) 메뉴에서 수동으로 삭제해주세요.`);
  }
}

/**
 * 매일 실행되는 함수
 */
function dailyUpdate() {
  try {
    // 설정 초기화
    initializeConfig();
    
    // 싸이버스카이 데이터 업데이트
    const result = CyberskyData.updateCyberskyData();
    
    if (result.success) {
      // 로그 기록
      logUpdate('싸이버스카이 자동 업데이트 성공', result);
      
      // EDI 데이터도 확인
      checkAndUpdateEDI();
    } else {
      logUpdate('싸이버스카이 자동 업데이트 실패', result);
    }
    
  } catch (error) {
    logUpdate('자동 업데이트 오류', { error: error.toString() });
  }
}

/**
 * EDI 데이터 확인 및 업데이트
 */
function checkAndUpdateEDI() {
  try {
    const now = new Date();
    const hours = now.getHours();
    const minutes = now.getMinutes();
    
    // 오후 1시 ~ 3시 30분 사이면 EDI 확인
    if ((hours === 13) || (hours === 14) || (hours === 15 && minutes <= 30)) {
      const ediResult = EDIData.updateEDIData();
      
      if (ediResult.success) {
        // EDI 데이터도 성공적으로 가져왔으면 데이터 처리
        const processResult = DataProcessor.processData();
        
        if (processResult.success) {
          logUpdate('EDI 업데이트 및 데이터 처리 완료', processResult);
          
          // 검산 실행
          const verifyResult = Verification.runVerification();
          logUpdate('검산 결과', verifyResult);
        }
      }
    }
  } catch (error) {
    logUpdate('EDI 확인 오류', { error: error.toString() });
  }
}

/**
 * 업데이트 로그 기록
 */
function logUpdate(message, details) {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  let logSheet = spreadsheet.getSheetByName('업데이트_로그');
  
  // 로그 시트가 없으면 생성
  if (!logSheet) {
    logSheet = spreadsheet.insertSheet('업데이트_로그');
    const headers = ['일시', '작업', '상태', '상세내용'];
    logSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    logSheet.getRange(1, 1, 1, headers.length)
      .setBackground('#f0f0f0')
      .setFontWeight('bold');
  }
  
  // 로그 추가
  const timestamp = new Date();
  const status = details.success ? '성공' : '실패';
  const detailsJson = JSON.stringify(details);
  
  const newRow = [timestamp, message, status, detailsJson];
  logSheet.appendRow(newRow);
  
  // 오래된 로그 정리 (최근 100개만 유지)
  const lastRow = logSheet.getLastRow();
  if (lastRow > 101) {
    logSheet.deleteRows(2, lastRow - 101);
  }
}

/**
 * 수동 테스트 실행
 */
function testDailyUpdate() {
  try {
    console.log('=== 수동 테스트 실행 시작 ===');
    dailyUpdate();
    
    // 실행 결과 확인
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const logSheet = spreadsheet.getSheetByName('업데이트_로그');
    
    let resultMessage = '테스트 실행 완료!\n업데이트_로그 시트에서 결과를 확인하세요.';
    
    if (logSheet) {
      const lastRow = logSheet.getLastRow();
      if (lastRow > 1) {
        const lastEntry = logSheet.getRange(lastRow, 1, 1, 4).getValues()[0];
        const [timestamp, action, status, details] = lastEntry;
        resultMessage += `\n\n최근 로그:\n시간: ${timestamp}\n작업: ${action}\n상태: ${status}`;
      }
    }
    
    SpreadsheetApp.getUi().alert(resultMessage);
    console.log('=== 수동 테스트 완료 ===');
    
  } catch (error) {
    console.error('테스트 실행 오류:', error);
    SpreadsheetApp.getUi().alert('❌ 테스트 실행 실패: ' + error.toString());
  }
}

/**
 * 즉시 테스트 (시간 무관)
 */
function immediateTest() {
  try {
    console.log('=== 즉시 테스트 시작 ===');
    
    // 설정 초기화
    initializeConfig();
    
    // 현재 시간 표시
    const now = new Date();
    console.log('현재 시간:', now.toLocaleString('ko-KR'));
    
    // 싸이버스카이 데이터 업데이트 시도
    const cyberskyResult = CyberskyData.updateCyberskyData();
    console.log('싸이버스카이 결과:', cyberskyResult);
    
    // 결과 로깅
    logUpdate('수동 즉시 테스트', cyberskyResult);
    
    // UI 알림
    const message = cyberskyResult.success 
      ? `✅ 즉시 테스트 성공!\n시트: ${cyberskyResult.sheetName}\n행 수: ${cyberskyResult.rowCount}` 
      : `❌ 즉시 테스트 실패:\n${cyberskyResult.error}`;
      
    SpreadsheetApp.getUi().alert(message);
    
  } catch (error) {
    console.error('즉시 테스트 오류:', error);
    logUpdate('즉시 테스트 오류', { success: false, error: error.toString() });
    SpreadsheetApp.getUi().alert('❌ 즉시 테스트 오류: ' + error.toString());
  }
}

/**
 * 날짜 지정 테스트 (과거 데이터 테스트용)
 */
function testWithDate() {
  try {
    const ui = SpreadsheetApp.getUi();
    
    // 사용자에게 날짜 입력 요청
    const response = ui.prompt(
      '📅 날짜 지정 테스트',
      '테스트할 날짜를 입력하세요:\n\n형식: MMDD (예: 0728, 0810)\n또는 YYYYMMDD (예: 20240728)',
      ui.ButtonSet.OK_CANCEL
    );
    
    if (response.getSelectedButton() === ui.Button.CANCEL) {
      return;
    }
    
    const inputDate = response.getResponseText().trim();
    if (!inputDate) {
      ui.alert('❌ 날짜를 입력해주세요.');
      return;
    }
    
    console.log('=== 날짜 지정 테스트 시작 ===');
    console.log('입력 날짜:', inputDate);
    
    // 설정 초기화
    initializeConfig();
    
    // 현재 시간 표시
    const now = new Date();
    console.log('현재 시간:', now.toLocaleString('ko-KR'));
    
    // 지정 날짜로 싸이버스카이 데이터 업데이트 시도
    const cyberskyResult = CyberskyData.updateCyberskyDataForDate(inputDate);
    console.log('싸이버스카이 결과:', cyberskyResult);
    
    // 결과 로깅
    logUpdate(`날짜 지정 테스트 (${inputDate})`, cyberskyResult);
    
    // UI 알림
    const message = cyberskyResult.success 
      ? `✅ 날짜 지정 테스트 성공!\n날짜: ${inputDate}\n시트: ${cyberskyResult.sheetName}\n행 수: ${cyberskyResult.rowCount}` 
      : `❌ 날짜 지정 테스트 실패:\n날짜: ${inputDate}\n오류: ${cyberskyResult.error}`;
      
    ui.alert(message);
    
  } catch (error) {
    console.error('날짜 지정 테스트 오류:', error);
    logUpdate('날짜 지정 테스트 오류', { success: false, error: error.toString() });
    SpreadsheetApp.getUi().alert('❌ 날짜 지정 테스트 오류: ' + error.toString());
  }
}
