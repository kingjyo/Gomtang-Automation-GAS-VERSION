/**
 * 검산 기능
 * Verification.gs
 */

const Verification = {
  /**
   * 검산 실행
   */
  runVerification: function() {
    try {
      const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
      
      // 날짜 추출
      let datePrefix = getTodayDate();
      const sheets = spreadsheet.getSheets();
      
      for (const sheet of sheets) {
        const name = sheet.getName();
        if (name.includes('_간편식_싸이버스카이') && !name.startsWith('TEST_')) {
          datePrefix = name.split('_')[0];
          break;
        }
      }
      
      // 시트 가져오기
      const sheetAName = datePrefix + '_간편식_싸이버스카이';
      const sheetBName = datePrefix + '_간편식_EDI';
      const sheetCName = datePrefix + '_간편식_수기송장';
      const sheetCNameOld = datePrefix + ' 간편식 수기송장'; // 기존 형식 호환
      
      const sheetA = spreadsheet.getSheetByName(sheetAName);
      const sheetB = spreadsheet.getSheetByName(sheetBName);
      let sheetC = spreadsheet.getSheetByName(sheetCName);
      
      // 새 형식이 없으면 기존 형식 시도
      if (!sheetC) {
        sheetC = spreadsheet.getSheetByName(sheetCNameOld);
      }
      
      if (!sheetA || !sheetB || !sheetC) {
        return {
          success: false,
          message: '필요한 시트를 찾을 수 없습니다.\n' +
                   `싸이버스카이: ${sheetA ? '있음' : '없음'}\n` +
                   `EDI: ${sheetB ? '있음' : '없음'}\n` +
                   `수기송장: ${sheetC ? '있음' : '없음'}`
        };
      }
      
      // 데이터 가져오기
      const dataA = sheetA.getDataRange().getValues();
      const dataB = sheetB.getDataRange().getValues();
      const dataC = sheetC.getDataRange().getValues();
      
      // 헤더 찾기
      const colA = this.findColumns(dataA[0], ['PROD_NAME', 'ORDERCNT']);
      const colB = this.findColumns(dataB[0], ['상품명', '수량']);
      const colC = this.findColumns(dataC[0], ['품목명', '수량', '메모1']);
      
      // B시트 상품명 정제
      const processedDataB = this.processProductNames(dataB.slice(1), colB['상품명']);
      
      // 상품별 수량 집계
      const productTotals = this.calculateProductTotals(
        dataA.slice(1), colA,
        processedDataB, colB,
        dataC.slice(1), colC
      );
      
      // 검산 결과 생성
      const result = this.generateVerificationResult(productTotals);
      
      // 결과를 새 시트에 저장
      this.saveVerificationResult(result.details, datePrefix);
      
      return result;
      
    } catch (error) {
      return {
        success: false,
        message: '검산 중 오류 발생: ' + error.toString()
      };
    }
  },
  
  /**
   * 열 인덱스 찾기
   */
  findColumns: function(headers, targetColumns) {
    const mapping = {};
    
    for (const target of targetColumns) {
      for (let i = 0; i < headers.length; i++) {
        const header = String(headers[i]).toLowerCase().replace(/\s/g, '');
        const targetLower = target.toLowerCase().replace(/\s/g, '');
        
        if (header.includes(targetLower)) {
          mapping[target] = i;
          break;
        }
      }
    }
    
    return mapping;
  },
  
  /**
   * B시트 상품명 정제
   */
  processProductNames: function(rows, prodColIndex) {
    const processedRows = [];
    
    for (const row of rows) {
      const processedRow = [...row];
      if (prodColIndex !== undefined) {
        const productName = String(processedRow[prodColIndex] || '');
        processedRow[prodColIndex] = productName.split('|')[0].trim();
      }
      processedRows.push(processedRow);
    }
    
    return processedRows;
  },
  
  /**
   * 상품별 수량 집계 (품목명 정규화 적용)
   */
  calculateProductTotals: function(dataA, colA, dataB, colB, dataC, colC) {
    const totals = {};
    
    console.log('=== 상품별 수량 집계 시작 ===');
    
    // A시트 집계 (싸이버스카이)
    console.log('A시트(싸이버스카이) 집계 중...');
    for (const row of dataA) {
      const rawProdName = String(row[colA['PROD_NAME']] || '').trim();
      const normalizedProdName = this.normalizeProductName(rawProdName);
      const qty = Number(row[colA['ORDERCNT']] || 0);
      
      if (normalizedProdName) {
        if (!totals[normalizedProdName]) {
          totals[normalizedProdName] = { a: 0, b: 0, c: 0 };
        }
        totals[normalizedProdName].a += qty;
        console.log(`  ${rawProdName} -> ${normalizedProdName}: +${qty} (총 ${totals[normalizedProdName].a})`);
      }
    }
    
    // B시트 집계 (EDI)
    console.log('B시트(EDI) 집계 중...');
    for (const row of dataB) {
      const rawProdName = String(row[colB['상품명']] || '').trim();
      const normalizedProdName = this.normalizeProductName(rawProdName);
      const qty = Number(row[colB['수량']] || 0);
      
      if (normalizedProdName) {
        if (!totals[normalizedProdName]) {
          totals[normalizedProdName] = { a: 0, b: 0, c: 0 };
        }
        totals[normalizedProdName].b += qty;
        console.log(`  ${rawProdName} -> ${normalizedProdName}: +${qty} (총 ${totals[normalizedProdName].b})`);
      }
    }
    
    // C시트 집계 (수기송장) - 쿠팡 마킹된 행 제외
    console.log('C시트(수기송장) 집계 중...');
    let excludedCoupangRows = 0;
    for (const row of dataC) {
      const rawProdName = String(row[colC['품목명']] || '').trim();
      const normalizedProdName = this.normalizeProductName(rawProdName);
      const qty = Number(row[colC['수량']] || 0);
      
      // S열(메모1)에 "쿠팡" 마킹이 있으면 검산에서 제외
      const memo1 = String(row[colC['메모1']] || '').trim();
      if (memo1 === '쿠팡') {
        excludedCoupangRows++;
        console.log(`  [제외] 쿠팡 데이터: ${rawProdName}, 수량: ${qty}`);
        continue;
      }
      
      if (normalizedProdName) {
        if (!totals[normalizedProdName]) {
          totals[normalizedProdName] = { a: 0, b: 0, c: 0 };
        }
        totals[normalizedProdName].c += qty;
        console.log(`  ${rawProdName} -> ${normalizedProdName}: +${qty} (총 ${totals[normalizedProdName].c})`);
      }
    }
    
    if (excludedCoupangRows > 0) {
      console.log(`쿠팡 마킹으로 검산에서 제외된 행: ${excludedCoupangRows}개`);
    }
    
    console.log('=== 최종 집계 결과 ===');
    Object.keys(totals).forEach(product => {
      const total = totals[product];
      console.log(`${product}: 싸이버스카이=${total.a}, EDI=${total.b}, 수기송장=${total.c}`);
    });
    console.log('=== 상품별 수량 집계 완료 ===');
    
    return totals;
  },
  
  /**
   * 품목명 정규화 (검산용)
   */
  normalizeProductName: function(productName) {
    if (!productName) return '';
    
    let normalized = productName.trim();
    
    // 1. "(1박스 5개입)" -> "(5팩 1세트)"
    normalized = normalized.replace(/\(1박스\s*(\d+)개입\)/g, '($1팩 1세트)');
    
    // 2. "5개입" -> "(5팩 1세트)" 
    normalized = normalized.replace(/(\d+)개입/g, '($1팩 1세트)');
    
    // 3. 공백 정규화
    normalized = normalized.replace(/\s+/g, ' ').trim();
    
    return normalized;
  },
  
  /**
   * 검산 결과 생성
   */
  generateVerificationResult: function(productTotals) {
    const details = [];
    let allSuccess = true;
    
    const sortedProducts = Object.keys(productTotals).sort();
    
    for (const product of sortedProducts) {
      const totals = productTotals[product];
      const calculated = totals.b + totals.c;
      const isMatch = calculated === totals.a;
      
      if (!isMatch) {
        allSuccess = false;
      }
      
      details.push({
        product: product,
        b: totals.b,
        c: totals.c,
        calculated: calculated,
        a: totals.a,
        isMatch: isMatch,
        status: isMatch ? '✅' : '❌'
      });
    }
    
    // 결과 메시지 생성
    let message = '=== 검산 결과 ===\n\n';
    
    for (const detail of details) {
      message += `${detail.status} ${detail.product}\n`;
      message += `   EDI: ${detail.b} + 수기송장: ${detail.c} = ${detail.calculated}\n`;
      message += `   싸이버스카이: ${detail.a}\n`;
      if (!detail.isMatch) {
        message += `   차이: ${detail.a - detail.calculated}\n`;
      }
      message += '\n';
    }
    
    message += '\n' + (allSuccess ? '✅ 검산 성공!' : '❌ 검산 실패!');
    
    return {
      success: allSuccess,
      message: message,
      details: details
    };
  },
  
  /**
   * 검산 결과 저장
   */
  saveVerificationResult: function(details, datePrefix) {
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    
    if (!datePrefix) {
      datePrefix = getTodayDate();
    }
    
    const sheetName = datePrefix + '_검산결과';
    
    // 기존 시트 삭제
    let sheet = spreadsheet.getSheetByName(sheetName);
    if (sheet) {
      spreadsheet.deleteSheet(sheet);
    }
    
    // 새 시트 생성
    sheet = spreadsheet.insertSheet(sheetName);
    
    // 헤더 설정
    const headers = ['상태', '품목명', 'EDI', '수기송장', '합계', '싸이버스카이', '차이'];
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    
    // 데이터 입력
    const rows = details.map(detail => [
      detail.status,
      detail.product,
      detail.b,
      detail.c,
      detail.calculated,
      detail.a,
      detail.a - detail.calculated
    ]);
    
    if (rows.length > 0) {
      sheet.getRange(2, 1, rows.length, rows[0].length).setValues(rows);
    }
    
    // 서식 설정
    sheet.getRange(1, 1, 1, headers.length)
      .setBackground('#4285f4')
      .setFontColor('#ffffff')
      .setFontWeight('bold');
    
    sheet.autoResizeColumns(1, headers.length);
  }
};
