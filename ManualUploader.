<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
    }
    
    .container {
      max-width: 900px;
      margin: 0 auto;
      background: white;
      border-radius: 15px;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
      overflow: hidden;
    }
    
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 30px;
      text-align: center;
    }
    
    .header h1 {
      font-size: 28px;
      margin-bottom: 10px;
    }
    
    .header p {
      opacity: 0.9;
      font-size: 14px;
    }
    
    .status-bar {
      background: #f8f9fa;
      padding: 15px 30px;
      border-bottom: 1px solid #e9ecef;
      display: flex;
      justify-content: space-around;
      flex-wrap: wrap;
    }
    
    .status-item {
      display: flex;
      align-items: center;
      margin: 5px 10px;
    }
    
    .status-indicator {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-right: 8px;
    }
    
    .status-indicator.success {
      background: #28a745;
      box-shadow: 0 0 10px rgba(40, 167, 69, 0.5);
    }
    
    .status-indicator.error {
      background: #dc3545;
      box-shadow: 0 0 10px rgba(220, 53, 69, 0.5);
    }
    
    .status-indicator.pending {
      background: #ffc107;
      box-shadow: 0 0 10px rgba(255, 193, 7, 0.5);
    }
    
    .content {
      padding: 30px;
    }
    
    .upload-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      margin-bottom: 30px;
    }
    
    @media (max-width: 768px) {
      .upload-grid {
        grid-template-columns: 1fr;
      }
    }
    
    .upload-box {
      border: 3px dashed #dee2e6;
      border-radius: 10px;
      padding: 30px;
      text-align: center;
      transition: all 0.3s ease;
      cursor: pointer;
      position: relative;
      background: #fafbfc;
    }
    
    .upload-box:hover {
      border-color: #667eea;
      background: #f8f9fa;
      transform: translateY(-2px);
    }
    
    .upload-box.dragover {
      background: #e3f2fd;
      border-color: #2196f3;
      transform: scale(1.02);
    }
    
    .upload-box.has-file {
      background: #e8f5e9;
      border-color: #4caf50;
      border-style: solid;
    }
    
    .upload-icon {
      font-size: 48px;
      margin-bottom: 15px;
    }
    
    .upload-box.a-sheet .upload-icon {
      color: #667eea;
    }
    
    .upload-box.b-sheet .upload-icon {
      color: #764ba2;
    }
    
    .upload-title {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 10px;
      color: #333;
    }
    
    .upload-description {
      font-size: 14px;
      color: #666;
      margin-bottom: 10px;
    }
    
    .upload-hint {
      font-size: 12px;
      color: #999;
    }
    
    .file-info {
      margin-top: 20px;
      padding: 15px;
      background: white;
      border-radius: 8px;
      text-align: left;
      display: none;
    }
    
    .file-info.show {
      display: block;
    }
    
    .file-name {
      font-weight: 600;
      color: #333;
      margin-bottom: 5px;
      word-break: break-all;
    }
    
    .file-size {
      font-size: 12px;
      color: #666;
    }
    
    .file-input {
      display: none;
    }
    
    .button-group {
      display: flex;
      gap: 10px;
      justify-content: center;
      margin-top: 30px;
    }
    
    .button {
      padding: 12px 30px;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 8px;
    }
    
    .button.primary {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }
    
    .button.primary:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
    }
    
    .button.secondary {
      background: #e9ecef;
      color: #495057;
    }
    
    .button.secondary:hover:not(:disabled) {
      background: #dee2e6;
    }
    
    .button.success {
      background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
      color: white;
    }
    
    .button.success:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 10px 30px rgba(40, 167, 69, 0.4);
    }
    
    .button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    .loading {
      display: none;
      text-align: center;
      padding: 30px;
    }
    
    .loading.show {
      display: block;
    }
    
    .spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #667eea;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      animation: spin 1s linear infinite;
      margin: 0 auto 20px;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .message {
      padding: 20px;
      border-radius: 10px;
      margin-top: 20px;
      display: none;
      animation: slideIn 0.3s ease;
    }
    
    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .message.success {
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
      display: block;
    }
    
    .message.error {
      background: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
      display: block;
    }
    
    .message.info {
      background: #d1ecf1;
      color: #0c5460;
      border: 1px solid #bee5eb;
      display: block;
    }
    
    .progress-container {
      margin-top: 20px;
      display: none;
    }
    
    .progress-container.show {
      display: block;
    }
    
    .progress-bar {
      width: 100%;
      height: 10px;
      background: #e9ecef;
      border-radius: 10px;
      overflow: hidden;
    }
    
    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, #667eea, #764ba2);
      width: 0%;
      transition: width 0.5s ease;
    }
    
    .progress-text {
      text-align: center;
      margin-top: 10px;
      font-size: 14px;
      color: #666;
    }
    
    .remove-file {
      position: absolute;
      top: 10px;
      right: 10px;
      background: #dc3545;
      color: white;
      border: none;
      border-radius: 50%;
      width: 25px;
      height: 25px;
      cursor: pointer;
      display: none;
      align-items: center;
      justify-content: center;
      font-size: 12px;
    }
    
    .upload-box.has-file .remove-file {
      display: flex;
    }
    
    .remove-file:hover {
      background: #c82333;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>📤 수동 데이터 업로더</h1>
      <p>싸이버스카이 및 EDI 데이터를 직접 업로드합니다</p>
    </div>
    
    <div class="status-bar">
      <div class="status-item">
        <div class="status-indicator" id="aSheetStatus"></div>
        <span>A시트 (싸이버스카이)</span>
      </div>
      <div class="status-item">
        <div class="status-indicator" id="bSheetStatus"></div>
        <span>B시트 (EDI)</span>
      </div>
      <div class="status-item">
        <div class="status-indicator" id="cSheetStatus"></div>
        <span>C시트 (수기송장)</span>
      </div>
    </div>
    
    <div class="content">
      <div class="upload-grid">
        <!-- A시트 업로드 박스 -->
        <div class="upload-box a-sheet" id="aSheetBox">
          <button class="remove-file" onclick="removeFile('a')">✕</button>
          <div class="upload-icon">📊</div>
          <div class="upload-title">A시트 (싸이버스카이)</div>
          <div class="upload-description">곰탕육포#제동#한국공항#YYYYMM</div>
          <div class="upload-hint">엑셀 파일을 드래그하거나 클릭하세요</div>
          <input type="file" id="aSheetInput" class="file-input" accept=".xlsx,.xls">
          <div class="file-info" id="aSheetFileInfo">
            <div class="file-name" id="aSheetFileName"></div>
            <div class="file-size" id="aSheetFileSize"></div>
          </div>
        </div>
        
        <!-- B시트 업로드 박스 -->
        <div class="upload-box b-sheet" id="bSheetBox">
          <button class="remove-file" onclick="removeFile('b')">✕</button>
          <div class="upload-icon">📋</div>
          <div class="upload-title">B시트 (EDI)</div>
          <div class="upload-description">YYYYMMDD_운송장 출력 상세</div>
          <div class="upload-hint">엑셀 파일을 드래그하거나 클릭하세요</div>
          <input type="file" id="bSheetInput" class="file-input" accept=".xlsx,.xls">
          <div class="file-info" id="bSheetFileInfo">
            <div class="file-name" id="bSheetFileName"></div>
            <div class="file-size" id="bSheetFileSize"></div>
          </div>
        </div>
      </div>
      
      <div class="progress-container" id="progressContainer">
        <div class="progress-bar">
          <div class="progress-fill" id="progressFill"></div>
        </div>
        <div class="progress-text" id="progressText">처리 중...</div>
      </div>
      
      <div class="button-group">
        <button class="button secondary" onclick="uploadIndividual('a')" id="uploadAButton">
          <span>📊</span> A시트만 업로드
        </button>
        <button class="button secondary" onclick="uploadIndividual('b')" id="uploadBButton">
          <span>📋</span> B시트만 업로드
        </button>
        <button class="button success" onclick="uploadBoth()" id="uploadBothButton">
          <span>⚡</span> 둘 다 업로드 및 처리
        </button>
        <button class="button primary" onclick="processData()" id="processButton">
          <span>🔄</span> 데이터 처리
        </button>
      </div>
      
      <div class="loading" id="loading">
        <div class="spinner"></div>
        <div id="loadingText">처리 중입니다...</div>
      </div>
      
      <div class="message" id="message"></div>
    </div>
  </div>
  
  <script>
    let aSheetFile = null;
    let bSheetFile = null;
    
    // 페이지 로드 시 상태 확인
    window.onload = function() {
      checkStatus();
    };
    
    // 상태 확인
    function checkStatus() {
      google.script.run
        .withSuccessHandler(function(status) {
          updateStatusIndicators(status);
        })
        .withFailureHandler(function(error) {
          console.error('상태 확인 실패:', error);
        })
        .ManualUploader.checkUploadStatus();
    }
    
    // 상태 표시 업데이트
    function updateStatusIndicators(status) {
      const aIndicator = document.getElementById('aSheetStatus');
      const bIndicator = document.getElementById('bSheetStatus');
      const cIndicator = document.getElementById('cSheetStatus');
      
      aIndicator.className = 'status-indicator ' + (status.aSheet ? 'success' : 'pending');
      bIndicator.className = 'status-indicator ' + (status.bSheet ? 'success' : 'pending');
      cIndicator.className = 'status-indicator ' + (status.cSheet ? 'success' : 'pending');
      
      // 버튼 상태 업데이트
      document.getElementById('processButton').disabled = !(status.aSheet && status.bSheet);
    }
    
    // 파일 업로드 박스 이벤트 설정
    setupUploadBox('aSheetBox', 'aSheetInput', 'a');
    setupUploadBox('bSheetBox', 'bSheetInput', 'b');
    
    function setupUploadBox(boxId, inputId, type) {
      const box = document.getElementById(boxId);
      const input = document.getElementById(inputId);
      
      // 클릭 이벤트
      box.addEventListener('click', function(e) {
        if (e.target.className !== 'remove-file') {
          input.click();
        }
      });
      
      // 파일 선택 이벤트
      input.addEventListener('change', function(e) {
        handleFile(e.target.files[0], type);
      });
      
      // 드래그 앤 드롭 이벤트
      box.addEventListener('dragover', function(e) {
        e.preventDefault();
        box.classList.add('dragover');
      });
      
      box.addEventListener('dragleave', function() {
        box.classList.remove('dragover');
      });
      
      box.addEventListener('drop', function(e) {
        e.preventDefault();
        box.classList.remove('dragover');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
          handleFile(files[0], type);
        }
      });
    }
    
    function handleFile(file, type) {
      if (!file) return;
      
      // 파일 확장자 확인
      const validExtensions = ['.xlsx', '.xls'];
      const fileExtension = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();
      
      if (!validExtensions.includes(fileExtension)) {
        showMessage('엑셀 파일(.xlsx, .xls)만 업로드 가능합니다.', 'error');
        return;
      }
      
      if (type === 'a') {
        aSheetFile = file;
        document.getElementById('aSheetFileName').textContent = '📄 ' + file.name;
        document.getElementById('aSheetFileSize').textContent = formatFileSize(file.size);
        document.getElementById('aSheetFileInfo').classList.add('show');
        document.getElementById('aSheetBox').classList.add('has-file');
      } else {
        bSheetFile = file;
        document.getElementById('bSheetFileName').textContent = '📄 ' + file.name;
        document.getElementById('bSheetFileSize').textContent = formatFileSize(file.size);
        document.getElementById('bSheetFileInfo').classList.add('show');
        document.getElementById('bSheetBox').classList.add('has-file');
      }
      
      // 버튼 상태 업데이트
      updateButtonStates();
      clearMessage();
    }
    
    function removeFile(type) {
      if (type === 'a') {
        aSheetFile = null;
        document.getElementById('aSheetFileInfo').classList.remove('show');
        document.getElementById('aSheetBox').classList.remove('has-file');
        document.getElementById('aSheetInput').value = '';
      } else {
        bSheetFile = null;
        document.getElementById('bSheetFileInfo').classList.remove('show');
        document.getElementById('bSheetBox').classList.remove('has-file');
        document.getElementById('bSheetInput').value = '';
      }
      updateButtonStates();
    }
    
    function updateButtonStates() {
      document.getElementById('uploadAButton').disabled = !aSheetFile;
      document.getElementById('uploadBButton').disabled = !bSheetFile;
      document.getElementById('uploadBothButton').disabled = !(aSheetFile && bSheetFile);
    }
    
    function formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];
    }
    
    function uploadIndividual(type) {
      const file = type === 'a' ? aSheetFile : bSheetFile;
      const name = type === 'a' ? 'A시트' : 'B시트';
      
      if (!file) {
        showMessage(`${name} 파일을 선택해주세요.`, 'error');
        return;
      }
      
      showLoading(`${name} 업로드 중...`);
      showProgress(0);
      
      const reader = new FileReader();
      reader.onload = function(e) {
        const fileData = e.target.result.split(',')[1];
        
        // 프로그레스 애니메이션
        animateProgress(90, 2000);
        
        const functionName = type === 'a' ? 'processASheetFile' : 'processBSheetFile';
        
        google.script.run
          .withSuccessHandler(function(result) {
            hideLoading();
            hideProgress();
            
            if (result.success) {
              showMessage(result.message, 'success');
              checkStatus();
              
              // 파일 초기화
              removeFile(type);
            } else {
              showMessage(result.error, 'error');
            }
            animateProgress(100, 200);
          })
          .withFailureHandler(function(error) {
            hideLoading();
            hideProgress();
            showMessage(`업로드 실패: ${error}`, 'error');
          })
          .ManualUploader[functionName](fileData, file.name);
      };
      
      reader.readAsDataURL(file);
    }
    
    function uploadBoth() {
      if (!aSheetFile || !bSheetFile) {
        showMessage('A시트와 B시트 파일을 모두 선택해주세요.', 'error');
        return;
      }
      
      showLoading('파일 읽는 중...');
      showProgress(0);
      
      // 두 파일을 순차적으로 읽기
      const readerA = new FileReader();
      const readerB = new FileReader();
      
      readerA.onload = function(eA) {
        const aFileData = eA.target.result.split(',')[1];
        
        readerB.onload = function(eB) {
          const bFileData = eB.target.result.split(',')[1];
          
          showLoading('데이터 처리 중...');
          animateProgress(50, 1000);
          
          google.script.run
            .withSuccessHandler(function(result) {
              hideLoading();
              
              if (result.success) {
                showMessage(result.message, 'success');
                checkStatus();
                animateProgress(100, 500);
                
                // 파일 초기화
                removeFile('a');
                removeFile('b');
                
                setTimeout(hideProgress, 2000);
              } else {
                showMessage(result.error, 'error');
                hideProgress();
              }
            })
            .withFailureHandler(function(error) {
              hideLoading();
              hideProgress();
              showMessage(`처리 실패: ${error}`, 'error');
            })
            .ManualUploader.processBothFiles(aFileData, aSheetFile.name, bFileData, bSheetFile.name);
        };
        
        readerB.readAsDataURL(bSheetFile);
      };
      
      readerA.readAsDataURL(aSheetFile);
    }
    
    function processData() {
      showLoading('데이터 처리 중...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            showMessage(`✅ 데이터 처리 완료!\n처리된 행: ${result.processedRows}`, 'success');
            checkStatus();
          } else {
            showMessage(result.error, 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          showMessage(`처리 실패: ${error}`, 'error');
        })
        .DataProcessor.processData();
    }
    
    function showLoading(text) {
      document.getElementById('loading').classList.add('show');
      document.getElementById('loadingText').textContent = text || '처리 중입니다...';
      disableAllButtons(true);
    }
    
    function hideLoading() {
      document.getElementById('loading').classList.remove('show');
      disableAllButtons(false);
      updateButtonStates();
    }
    
    function showProgress(percent) {
      document.getElementById('progressContainer').classList.add('show');
      document.getElementById('progressFill').style.width = percent + '%';
      document.getElementById('progressText').textContent = `처리 중... ${Math.round(percent)}%`;
    }
    
    function hideProgress() {
      document.getElementById('progressContainer').classList.remove('show');
    }
    
    function animateProgress(targetPercent, duration) {
      const progressFill = document.getElementById('progressFill');
      const progressText = document.getElementById('progressText');
      const startPercent = parseInt(progressFill.style.width) || 0;
      const increment = (targetPercent - startPercent) / (duration / 50);
      
      let currentPercent = startPercent;
      const interval = setInterval(function() {
        currentPercent += increment;
        if ((increment > 0 && currentPercent >= targetPercent) || 
            (increment < 0 && currentPercent <= targetPercent)) {
          currentPercent = targetPercent;
          clearInterval(interval);
        }
        progressFill.style.width = currentPercent + '%';
        progressText.textContent = `처리 중... ${Math.round(currentPercent)}%`;
      }, 50);
    }
    
    function disableAllButtons(disabled) {
      document.querySelectorAll('.button').forEach(button => {
        button.disabled = disabled;
      });
    }
    
    function showMessage(text, type) {
      const message = document.getElementById('message');
      message.textContent = text;
      message.className = 'message ' + type;
      
      if (type === 'success') {
        setTimeout(clearMessage, 5000);
      }
    }
    
    function clearMessage() {
      const message = document.getElementById('message');
      message.classList.remove('success', 'error', 'info');
    }
  </script>
</body>
</html>
