/**
 * Google Picker 기반 파일/폴더 선택기 (좌측 내비게이션 지원)
 * 파일명: GooglePicker.gs
 */

function __init_setPickerConfigOnce() {
  const props = PropertiesService.getScriptProperties();
  // 이미 저장해둔 값 사용해도 됩니다.
  props.setProperty('PICKER_API_KEY', 'YOUR_PICKER_API_KEY');
  props.setProperty('GCP_PROJECT_NUMBER', 'YOUR_GCP_PROJECT_NUMBER');
  SpreadsheetApp.getUi().alert('Picker 설정값 저장 완료');
}

function openGooglePicker() {
  const html = HtmlService.createTemplateFromFile('PickerDialog').evaluate()
    .setWidth(1100)
    .setHeight(760)
    .setTitle('구글 드라이브 파일/폴더 선택');
  SpreadsheetApp.getUi().showModalDialog(html, '📁 구글 드라이브 설정');
}

/** HTML include 헬퍼 */
function include(name) {
  return HtmlService.createHtmlOutputFromFile(name).getContent();
}

/**
 * ✅ Drive 스코프 강제 워밍업
 * - getOAuthToken() 호출 전에 반드시 실행
 * - 최소 권한 접근으로 스코프만 획득 (실제 파일 읽지 않음)
 */
function ensureDriveScope() {
  try {
    // root ID만 터치해서 권한 승인 유도
    DriveApp.getRootFolder().getId();
    return { ok: true };
  } catch (e) {
    return { ok: false, error: String(e) };
  }
}

function getOAuthToken() {
  try { return ScriptApp.getOAuthToken(); }
  catch (e) { console.error('OAuth 토큰 오류:', e); return null; }
}

function getPickerApiKey() {
  return PropertiesService.getScriptProperties().getProperty('PICKER_API_KEY') || '';
}

function getPickerAppId() { // 선택(없어도 동작)
  return PropertiesService.getScriptProperties().getProperty('GCP_PROJECT_NUMBER') || '';
}

/** 빠른 표시용(권한 불필요) */
function getCurrentPickerSettingsLite() {
  const p = PropertiesService.getScriptProperties();
  return {
    success: true,
    settings: {
      sourceSpreadsheetId: p.getProperty('SOURCE_SPREADSHEET_ID') || '',
      sourceSpreadsheetName: '',
      folderId: p.getProperty('FOLDER_ID') || '',
      folderName: ''
    }
  };
}

/** 네트워크/세션 확인용 */
function pingServer() {
  return { ok: true, ts: new Date().toISOString() };
}

/** 이름 포함(Drive 권한 필요, 실패해도 무시) */
function getCurrentPickerSettings() {
  const p = PropertiesService.getScriptProperties();
  const ssId = p.getProperty('SOURCE_SPREADSHEET_ID') || '';
  const folderId = p.getProperty('FOLDER_ID') || '';
  return {
    success: true,
    settings: {
      sourceSpreadsheetId: ssId,
      sourceSpreadsheetName: getDisplayName(ssId),
      folderId: folderId,
      folderName: getDisplayName(folderId)
    }
  };
}

function getDisplayName(id) {
  if (!id) return '';
  try {
    try { return SpreadsheetApp.openById(id).getName(); }
    catch (e1) {
      try { return DriveApp.getFolderById(id).getName(); }
      catch (e2) {
        try { return DriveApp.getFileById(id).getName(); }
        catch (e3) { return '(접근 불가)'; }
      }
    }
  } catch (e) { return '(접근 불가)'; }
}

function savePickerSelection(selection) {
  try {
    const p = PropertiesService.getScriptProperties();
    if (selection?.spreadsheetId) p.setProperty('SOURCE_SPREADSHEET_ID', selection.spreadsheetId);
    if (selection?.folderId) p.setProperty('FOLDER_ID', selection.folderId);
    return { success: true, message: '설정이 저장되었습니다.' };
  } catch (err) {
    return { success: false, error: String(err) };
  }
}
