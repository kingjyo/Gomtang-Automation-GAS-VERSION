/**
 * 로컬 엑셀 업로드 처리 - 싸이버스카이 및 EDI 데이터
 * LocalExcelUploader.gs
 */

const LocalExcelUploader = {
  /**
   * A시트(싸이버스카이) 엑셀 파일 처리
   */
  processASheetFile: function(fileData, fileName, targetDate) {
    try {
      console.log('=== A시트 처리 시작 ===');
      console.log('Parameters:', { fileName, targetDate });
      
      // 설정 초기화
      initializeConfig();
      
      // Base64 디코딩
      const blob = Utilities.newBlob(
        Utilities.base64Decode(fileData), 
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 
        fileName
      );
      
      // 임시 파일로 저장
      const tempFile = DriveApp.createFile(blob);
      tempFile.setName('temp_a_' + fileName);
      
      // 날짜 처리
      let todayFull, todayShort;
      if (targetDate) {
        if (targetDate.length === 4) {
          // MMDD 형식 직접 입력
          todayShort = targetDate;
          const currentYear = new Date().getFullYear();
          const month = targetDate.substring(0, 2);
          const day = targetDate.substring(2, 4);
          todayFull = currentYear + month + day;
        } else {
          // YYYYMMDD 형식
          todayFull = targetDate.replace(/\//g, '').replace(/-/g, '');
          todayShort = todayFull.substring(4, 6) + todayFull.substring(6, 8); // MMDD
        }
      } else {
        todayFull = getTodayDate();
        todayShort = getTodayShortDate();
      }
      
      console.log('Target date:', { todayFull, todayShort });
      const targetFileName = todayFull + '_간편식_싸이버스카이';
      
      const resource = {
        title: targetFileName,
        mimeType: MimeType.GOOGLE_SHEETS
      };
      
      const fileId = tempFile.getId();
      const convertedFile = Drive.Files.copy(resource, fileId);
      
      // 임시 파일 삭제
      DriveApp.getFileById(fileId).setTrashed(true);
      
      // 변환된 스프레드시트 열기
      const sourceSpreadsheet = SpreadsheetApp.openById(convertedFile.id);
      console.log('Available sheets:', sourceSpreadsheet.getSheets().map(s => s.getName()));
      
      // MMDD 형식의 시트 찾기 (예: 0809)
      let sourceSheet = sourceSpreadsheet.getSheetByName(todayShort);
      
      if (!sourceSheet) {
        // MMDD 형식을 찾지 못하면 다른 형식들 시도
        const sheets = sourceSpreadsheet.getSheets();
        
        // 가능한 형식들 시도: MMDD, MM/DD, M/D 등
        const possibleNames = [
          todayShort, // 0809
          `${todayShort.substring(0,2)}/${todayShort.substring(2,4)}`, // 08/09
          `${parseInt(todayShort.substring(0,2))}/${parseInt(todayShort.substring(2,4))}`, // 8/9
          `${parseInt(todayShort.substring(0,2))}.${parseInt(todayShort.substring(2,4))}`, // 8.9
        ];
        
        console.log('Searching for sheet names:', possibleNames);
        
        for (const name of possibleNames) {
          sourceSheet = sourceSpreadsheet.getSheetByName(name);
          if (sourceSheet) {
            console.log('Found sheet:', name);
            break;
          }
        }
        
        // 여전히 찾지 못하면 사용자에게 알림
        if (!sourceSheet) {
          const availableSheets = sheets.map(s => s.getName()).join(', ');
          throw new Error(`${todayShort} 형식의 시트를 찾을 수 없습니다.\n사용 가능한 시트: ${availableSheets}\n올바른 날짜를 지정했는지 확인해주세요.`);
        }
      }
      
      // 데이터 읽기
      const data = sourceSheet.getDataRange().getValues();
      
      // 현재 스프레드시트에 데이터 복사
      const currentSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();
      
      // 기존 시트가 있으면 삭제
      let targetSheet = currentSpreadsheet.getSheetByName(targetFileName);
      if (targetSheet) {
        currentSpreadsheet.deleteSheet(targetSheet);
      }
      
      // 새 시트 생성
      targetSheet = currentSpreadsheet.insertSheet(targetFileName);
      
      // 데이터 입력
      if (data.length > 0) {
        targetSheet.getRange(1, 1, data.length, data[0].length).setValues(data);
      }
      
      // 드라이브 폴더로 이동
      this.moveToDateFolder(convertedFile.id, todayFull, targetFileName);
      
      return {
        success: true,
        message: `A시트 업로드 완료!\n${data.length}행의 데이터를 가져왔습니다.`,
        sheetName: targetFileName,
        rowCount: data.length
      };
      
    } catch (error) {
      return {
        success: false,
        error: 'A시트 처리 실패: ' + error.toString()
      };
    }
  },
  
  /**
   * B시트(EDI) 엑셀 파일 처리
   */
  processBSheetFile: function(fileData, fileName, targetDate) {
    try {
      console.log('=== B시트 처리 시작 ===');
      console.log('Parameters:', { fileName, targetDate });
      
      // 설정 초기화
      initializeConfig();
      
      // Base64 디코딩
      const blob = Utilities.newBlob(
        Utilities.base64Decode(fileData), 
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 
        fileName
      );
      
      // 임시 파일로 저장
      const tempFile = DriveApp.createFile(blob);
      tempFile.setName('temp_b_' + fileName);
      
      // 날짜 처리
      let todayFull;
      if (targetDate) {
        if (targetDate.length === 4) {
          // MMDD 형식 직접 입력
          const currentYear = new Date().getFullYear();
          const month = targetDate.substring(0, 2);
          const day = targetDate.substring(2, 4);
          todayFull = currentYear + month + day;
        } else {
          // YYYYMMDD 형식
          todayFull = targetDate.replace(/\//g, '').replace(/-/g, '');
        }
      } else {
        todayFull = getTodayDate();
      }
      
      console.log('Target date:', todayFull);
      const targetFileName = todayFull + '_간편식_EDI';
      
      const resource = {
        title: targetFileName,
        mimeType: MimeType.GOOGLE_SHEETS
      };
      
      const fileId = tempFile.getId();
      const convertedFile = Drive.Files.copy(resource, fileId);
      
      // 임시 파일 삭제
      DriveApp.getFileById(fileId).setTrashed(true);
      
      // 변환된 스프레드시트 열기
      const sourceSpreadsheet = SpreadsheetApp.openById(convertedFile.id);
      
      // empty 시트 찾기 (없으면 첫 번째 시트 사용)
      let sourceSheet = sourceSpreadsheet.getSheetByName('empty');
      if (!sourceSheet) {
        sourceSheet = sourceSpreadsheet.getSheets()[0];
      }
      
      // 데이터 읽기
      const data = sourceSheet.getDataRange().getValues();
      
      // 현재 스프레드시트에 데이터 복사
      const currentSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();
      
      // 기존 시트가 있으면 삭제
      let targetSheet = currentSpreadsheet.getSheetByName(targetFileName);
      if (targetSheet) {
        currentSpreadsheet.deleteSheet(targetSheet);
      }
      
      // 새 시트 생성
      targetSheet = currentSpreadsheet.insertSheet(targetFileName);
      
      // 데이터 입력
      if (data.length > 0) {
        targetSheet.getRange(1, 1, data.length, data[0].length).setValues(data);
      }
      
      // 드라이브 폴더로 이동
      this.moveToDateFolder(convertedFile.id, todayFull, targetFileName);
      
      return {
        success: true,
        message: `B시트(EDI) 업로드 완료!\n${data.length}행의 데이터를 가져왔습니다.`,
        sheetName: targetFileName,
        rowCount: data.length
      };
      
    } catch (error) {
      return {
        success: false,
        error: 'B시트 처리 실패: ' + error.toString()
      };
    }
  },
  
  /**
   * A시트와 B시트 모두 업로드 (데이터 처리 없음)
   */
  processBothFiles: function(aFileData, aFileName, bFileData, bFileName, targetDate) {
    try {
      console.log('=== 동시 업로드 시작 ===');
      console.log('Parameters:', { aFileName, bFileName, targetDate });
      
      // A시트 처리
      console.log('A시트 처리 중...');
      const aResult = this.processASheetFile(aFileData, aFileName, targetDate);
      if (!aResult.success) {
        console.log('A시트 처리 실패');
        return aResult;
      }
      
      // B시트 처리
      console.log('B시트 처리 중...');
      const bResult = this.processBSheetFile(bFileData, bFileName, targetDate);
      if (!bResult.success) {
        console.log('B시트 처리 실패');
        return bResult;
      }
      
      console.log('=== 동시 업로드 완료 ===');
      return {
        success: true,
        message: `✅ 업로드 완료!\n\nA시트: ${aResult.rowCount}행\nB시트: ${bResult.rowCount}행\n\n데이터 처리는 별도로 실행해주세요.`
      };
      
    } catch (error) {
      console.error('동시 업로드 실패:', error);
      return {
        success: false,
        error: '업로드 실패: ' + error.toString()
      };
    }
  },
  
  /**
   * 파일을 날짜 폴더로 이동
   */
  moveToDateFolder: function(fileId, dateString, fileName) {
    try {
      const file = DriveApp.getFileById(fileId);
      const parentFolderId = CONFIG.FOLDER_ID;
      
      if (!parentFolderId || parentFolderId === 'YOUR_FOLDER_ID') {
        console.log('폴더 ID가 설정되지 않아 루트 폴더에 저장됩니다.');
        return;
      }
      
      const parentFolder = DriveApp.getFolderById(parentFolderId);
      
      // 날짜 폴더 생성 또는 가져오기
      const folders = parentFolder.getFoldersByName(dateString);
      let dateFolder;
      
      if (folders.hasNext()) {
        dateFolder = folders.next();
      } else {
        dateFolder = parentFolder.createFolder(dateString);
      }
      
      // 같은 이름의 기존 파일이 있으면 삭제
      const existingFiles = dateFolder.getFilesByName(fileName);
      while (existingFiles.hasNext()) {
        const existingFile = existingFiles.next();
        existingFile.setTrashed(true);
      }
      
      // 파일 이동
      dateFolder.addFile(file);
      
      // 원래 위치에서 제거
      const parents = file.getParents();
      while (parents.hasNext()) {
        const parent = parents.next();
        if (parent.getId() !== dateFolder.getId()) {
          parent.removeFile(file);
        }
      }
      
      console.log(`파일이 ${dateString} 폴더로 이동되었습니다.`);
      
    } catch (error) {
      console.error('파일 이동 실패:', error);
    }
  },
  
  /**
   * 업로드 상태 확인
   */
  checkUploadStatus: function() {
    try {
      const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
      const sheets = spreadsheet.getSheets();
      
      let aSheet = null;
      let bSheet = null;
      let cSheet = null;
      
      // 가장 최근의 시트들 찾기
      for (const sheet of sheets) {
        const name = sheet.getName();
        if (!name.startsWith('TEST_') && !name.startsWith('샘플_')) {
          if (name.includes('_간편식_싸이버스카이') && !aSheet) {
            aSheet = sheet;
          }
          if (name.includes('_간편식_EDI') && !bSheet) {
            bSheet = sheet;
          }
          if ((name.includes('_간편식_수기송장') || name.includes(' 간편식 수기송장')) && !cSheet) {
            cSheet = sheet;
          }
        }
      }
      
      return {
        aSheet: aSheet ? true : false,
        bSheet: bSheet ? true : false,
        cSheet: cSheet ? true : false,
        aSheetRows: aSheet ? aSheet.getLastRow() : 0,
        bSheetRows: bSheet ? bSheet.getLastRow() : 0,
        cSheetRows: cSheet ? cSheet.getLastRow() : 0
      };
      
    } catch (error) {
      return {
        aSheet: false,
        bSheet: false,
        cSheet: false,
        error: error.toString()
      };
    }
  }
};

/**
 * HTML에서 호출할 전역 함수들 (ExcelUploaderDialog용)
 */

// 테스트용 함수 (연결 확인)
function testConnection() {
  console.log('=== Test Connection: SUCCESS ===');
  return { success: true, message: '연결 테스트 성공!' };
}
function processASheetFile(fileData, fileName, targetDate) {
  console.log('=== Global Function Start: processASheetFile ===');
  console.log('Parameters:', { fileName, targetDate });
  
  try {
    const result = LocalExcelUploader.processASheetFile(fileData, fileName, targetDate);
    console.log('Processing result:', result);
    console.log('=== Global Function End: processASheetFile SUCCESS ===');
    return result;
    
  } catch (error) {
    console.error('ERROR in global processASheetFile:', error.toString());
    console.error('Error stack:', error.stack);
    console.log('=== Global Function End: processASheetFile FAILED ===');
    return { success: false, error: error.toString() };
  }
}

function processBSheetFile(fileData, fileName, targetDate) {
  console.log('=== Global Function Start: processBSheetFile ===');
  console.log('Parameters:', { fileName, targetDate });
  
  try {
    const result = LocalExcelUploader.processBSheetFile(fileData, fileName, targetDate);
    console.log('Processing result:', result);
    console.log('=== Global Function End: processBSheetFile SUCCESS ===');
    return result;
    
  } catch (error) {
    console.error('ERROR in global processBSheetFile:', error.toString());
    console.error('Error stack:', error.stack);
    console.log('=== Global Function End: processBSheetFile FAILED ===');
    return { success: false, error: error.toString() };
  }
}

function processBothFiles(aFileData, aFileName, bFileData, bFileName, targetDate) {
  console.log('=== Global Function Start: processBothFiles ===');
  console.log('Parameters:', { aFileName, bFileName, targetDate });
  
  try {
    const result = LocalExcelUploader.processBothFiles(aFileData, aFileName, bFileData, bFileName, targetDate);
    console.log('Processing result:', result);
    console.log('=== Global Function End: processBothFiles SUCCESS ===');
    return result;
    
  } catch (error) {
    console.error('ERROR in global processBothFiles:', error.toString());
    console.error('Error stack:', error.stack);
    console.log('=== Global Function End: processBothFiles FAILED ===');
    return { success: false, error: error.toString() };
  }
}

function checkUploadStatus() {
  console.log('=== Global Function Start: checkUploadStatus ===');
  
  try {
    const result = LocalExcelUploader.checkUploadStatus();
    console.log('Status result:', result);
    console.log('=== Global Function End: checkUploadStatus SUCCESS ===');
    return result;
    
  } catch (error) {
    console.error('ERROR in global checkUploadStatus:', error.toString());
    console.error('Error stack:', error.stack);
    console.log('=== Global Function End: checkUploadStatus FAILED ===');
    return { 
      aSheet: false,
      bSheet: false,
      cSheet: false,
      error: error.toString()
    };
  }
}
