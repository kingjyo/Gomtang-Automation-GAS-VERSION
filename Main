/**
 * 곰탕 출고 자동화 시스템 - 메인 컨트롤러
 * Main.gs
 */

// 전역 설정
const CONFIG = {
  SOURCE_SPREADSHEET_ID: 'YOUR_SOURCE_SPREADSHEET_ID', // 싸이버스카이 데이터 소스 스프레드시트 ID
  FOLDER_ID: 'YOUR_FOLDER_ID', // 저장할 구글 드라이브 폴더 ID
  MANUAL_TEMPLATE_SHEET_NAME: '간편식 수기송장 양식',
  SENDER_POSTAL_CODE: '7505',
  SENDER_ADDRESS: '서울 강서구 오정로 602'
};

/**
 * 스크립트 초기화 시 설정 로드
 */
function initializeConfig() {
  const settings = getSettings();
  CONFIG.SOURCE_SPREADSHEET_ID = settings.sourceSpreadsheetId;
  CONFIG.FOLDER_ID = settings.folderId;
  CONFIG.SENDER_POSTAL_CODE = settings.senderPostal;
  CONFIG.SENDER_ADDRESS = settings.senderAddress;
}

/**
 * 이메일 설정 시트 생성
 */
function createEmailSettingsSheet() {
  console.log('=== Function Start: createEmailSettingsSheet ===');
  
  try {
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const sheetName = '이메일_설정';
    
    // 기존 시트가 있는지 확인
    let emailSettingsSheet = spreadsheet.getSheetByName(sheetName);
    
    if (emailSettingsSheet) {
      const ui = SpreadsheetApp.getUi();
      const response = ui.alert(
        '⚠️ 시트 이미 존재',
        `'${sheetName}' 시트가 이미 존재합니다.\n\n기존 시트를 삭제하고 새로 만드시겠습니까?`,
        ui.ButtonSet.YES_NO
      );
      
      if (response === ui.Button.YES) {
        spreadsheet.deleteSheet(emailSettingsSheet);
        console.log('기존 이메일_설정 시트 삭제');
      } else {
        console.log('시트 생성 취소');
        return { success: false, error: '사용자가 취소했습니다.' };
      }
    }
    
    // 새 시트 생성
    emailSettingsSheet = spreadsheet.insertSheet(sheetName);
    console.log('새 이메일_설정 시트 생성');
    
    // 헤더 설정
    const headers = ['우선순위', '전송여부', '이름', '이메일', '메모'];
    emailSettingsSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    
    // 헤더 스타일링
    const headerRange = emailSettingsSheet.getRange(1, 1, 1, headers.length);
    headerRange.setBackground('#4285f4');
    headerRange.setFontColor('white');
    headerRange.setFontWeight('bold');
    headerRange.setHorizontalAlignment('center');
    
    // 샘플 데이터 추가
    const sampleData = [
      [1, 'TRUE', '김영준', 'example1@company.com', '담당자'],
      [2, 'FALSE', '홍길동', 'example2@company.com', '백업 담당자'],
      [3, 'TRUE', '이순신', 'example3@company.com', '관리자']
    ];
    
    emailSettingsSheet.getRange(2, 1, sampleData.length, headers.length).setValues(sampleData);
    
    // 열 너비 조정
    emailSettingsSheet.setColumnWidth(1, 80);  // 우선순위
    emailSettingsSheet.setColumnWidth(2, 80);  // 전송여부
    emailSettingsSheet.setColumnWidth(3, 100); // 이름
    emailSettingsSheet.setColumnWidth(4, 200); // 이메일
    emailSettingsSheet.setColumnWidth(5, 150); // 메모
    
    // 우선순위 열에 숫자 검증 추가
    const priorityRange = emailSettingsSheet.getRange(2, 1, 1000, 1); // A2:A1001
    const priorityValidation = SpreadsheetApp.newDataValidation()
      .requireNumberGreaterThan(0)
      .setAllowInvalid(false)
      .build();
    priorityRange.setDataValidation(priorityValidation);
    
    // 전송여부 열에 데이터 검증 추가 (TRUE/FALSE 드롭다운)
    const validationRange = emailSettingsSheet.getRange(2, 2, 1000, 1); // B2:B1001
    const validation = SpreadsheetApp.newDataValidation()
      .requireValueInList(['TRUE', 'FALSE'])
      .setAllowInvalid(false)
      .build();
    validationRange.setDataValidation(validation);
    
    // 테두리 추가
    const dataRange = emailSettingsSheet.getRange(1, 1, sampleData.length + 1, headers.length);
    dataRange.setBorder(true, true, true, true, true, true);
    
    // 시트 활성화
    emailSettingsSheet.activate();
    
    // 사용자에게 안내 메시지
    const ui = SpreadsheetApp.getUi();
    ui.alert(
      '✅ 이메일 설정 시트 생성 완료',
      `'${sheetName}' 시트가 성공적으로 생성되었습니다.\n\n` +
      '• 우선순위: 숫자가 작을수록 높은 우선순위입니다\n' +
      '• 전송여부: TRUE로 설정된 사용자만 이메일을 받습니다\n' +
      '• 샘플 데이터는 실제 데이터로 수정해주세요',
      ui.ButtonSet.OK
    );
    
    console.log('=== Function End: createEmailSettingsSheet SUCCESS ===');
    return { success: true, message: '이메일 설정 시트가 생성되었습니다.' };
    
  } catch (error) {
    console.error('ERROR in createEmailSettingsSheet:', error.toString());
    console.log('=== Function End: createEmailSettingsSheet FAILED ===');
    
    const ui = SpreadsheetApp.getUi();
    ui.alert(
      '❌ 시트 생성 실패',
      `이메일 설정 시트 생성에 실패했습니다:\n\n${error.toString()}`,
      ui.ButtonSet.OK
    );
    
    return { success: false, error: error.toString() };
  }
}

/**
 * 스프레드시트 열 때 메뉴 생성
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('📦 곰탕 출고 자동화')
    .addItem('🔄 싸이버스카이 자료 업데이트', 'updateCybersky')
    .addItem('📧 오늘 EDI 업데이트', 'updateTodayEDI')
    .addItem('⚡ 싸이버스카이, EDI 동시 업데이트', 'updateBoth')
    .addSeparator()
    .addItem('⚙️ 데이터 처리 실행', 'runDataProcessor')
    .addItem('🧮 검산 실행', 'runVerification')
    .addItem('📊 품목별 시트 분리', 'splitByProduct')
    .addSeparator()
    .addItem('🛍️ 쿠팡 데이터 업로더 열기', 'openCoupangUploader')
    .addItem('📥 품목별 다운로더 열기', 'openProductDownloader')
    .addItem('📤 로컬 엑셀 업로더 열기', 'openLocalExcelUploader')
    .addItem('📧 이메일 전송기 열기', 'openEmailSender')
    .addItem('📁 드라이브로 초기 설정', 'openGooglePicker')
    .addSeparator()
    .addItem('⏰ 자동 실행 설정', 'setupTriggers')
    .addItem('🚀 완전 자동화 트리거 설정', 'setupCompleteAutomationTrigger')
    .addItem('▶️ 완전 자동화 수동 실행', 'manualCompleteAutomation')
    .addItem('🔧 설정', 'openSettings')
    .addItem('📧 이메일 설정 시트 생성', 'createEmailSettingsSheet')
    .addSeparator()
    .addItem('🧪 테스트 - 최근 EDI 가져오기', 'testGetRecentEDI')
    .addItem('🧪 테스트 - 자동 업데이트 실행', 'testDailyUpdate')
    .addItem('⚡ 테스트 - 즉시 실행 (시간무관)', 'immediateTest')
    .addItem('📅 테스트 - 날짜 지정 (과거데이터)', 'testWithDate')
    .addItem('🧪 테스트 - 템플릿 시트 초기화', 'clearTemplates')
    .addToUi();
}

/**
 * 싸이버스카이 자료 업데이트
 */
function updateCybersky() {
  // 설정 초기화
  initializeConfig();
  
  const ui = SpreadsheetApp.getUi();
  
  // 날짜 선택 옵션
  const response = ui.alert(
    '📅 날짜 선택',
    '오늘 날짜의 데이터를 가져오시겠습니까?\n\n' +
    '예: 오늘 날짜 (자동)\n' +
    '아니오: 날짜 직접 지정',
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (response === ui.Button.CANCEL) {
    return;
  }
  
  let targetDate = null;
  if (response === ui.Button.NO) {
    // 날짜 직접 입력
    const dateResponse = ui.prompt(
      '날짜 입력',
      'MMDD 형식으로 입력하세요 (예: 0807, 0808)',
      ui.ButtonSet.OK_CANCEL
    );
    
    if (dateResponse.getSelectedButton() !== ui.Button.OK) {
      return;
    }
    
    targetDate = dateResponse.getResponseText().trim();
    if (!/^\d{4}$/.test(targetDate)) {
      ui.alert('❌ 잘못된 날짜 형식입니다. MMDD 형식으로 입력해주세요.');
      return;
    }
  }
  
  try {
    const result = targetDate 
      ? CyberskyData.updateCyberskyDataForDate(targetDate)
      : CyberskyData.updateCyberskyData();
      
    if (result.success) {
      ui.alert('✅ 싸이버스카이 자료 업데이트 완료!\n' + 
               (targetDate ? `날짜: ${targetDate}` : '날짜: 오늘'));
    } else {
      throw new Error(result.error);
    }
  } catch (error) {
    ui.alert('❌ 오류: ' + error.toString());
  }
}

/**
 * 오늘 EDI 업데이트
 */
function updateTodayEDI() {
  // 설정 초기화
  initializeConfig();
  
  const ui = SpreadsheetApp.getUi();
  
  // 날짜 선택 옵션
  const response = ui.alert(
    '📅 날짜 선택',
    '오늘 날짜의 EDI를 가져오시겠습니까?\n\n' +
    '예: 오늘 날짜 (자동)\n' +
    '아니오: 날짜 직접 지정',
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (response === ui.Button.CANCEL) {
    return;
  }
  
  let targetDate = null;
  if (response === ui.Button.NO) {
    // 날짜 직접 입력
    const dateResponse = ui.prompt(
      '날짜 입력',
      'MMDD 형식으로 입력하세요 (예: 0728, 0807)',
      ui.ButtonSet.OK_CANCEL
    );
    
    if (dateResponse.getSelectedButton() !== ui.Button.OK) {
      return;
    }
    
    targetDate = dateResponse.getResponseText().trim();
    if (!/^\d{4}$/.test(targetDate)) {
      ui.alert('❌ 잘못된 날짜 형식입니다. MMDD 형식으로 입력해주세요.');
      return;
    }
  }
  
  try {
    const result = targetDate 
      ? EDIData.getEDIFromEmail(targetDate)
      : EDIData.updateEDIData();
      
    if (result.success) {
      ui.alert('✅ EDI 업데이트 완료!\n' + 
               (targetDate ? `날짜: ${targetDate}` : '날짜: 오늘'));
    } else {
      throw new Error(result.error);
    }
  } catch (error) {
    ui.alert('❌ 오류: ' + error.toString());
  }
}

/**
 * 싸이버스카이와 EDI 동시 업데이트
 */
function updateBoth() {
  // 설정 초기화
  initializeConfig();
  
  const ui = SpreadsheetApp.getUi();
  
  // 날짜 선택 옵션
  const response = ui.alert(
    '📅 날짜 선택',
    '오늘 날짜의 데이터를 처리하시겠습니까?\n\n' +
    '예: 오늘 날짜 (자동)\n' +
    '아니오: 날짜 직접 지정',
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (response === ui.Button.CANCEL) {
    return;
  }
  
  let targetDate = null;
  if (response === ui.Button.NO) {
    // 날짜 직접 입력
    const dateResponse = ui.prompt(
      '날짜 입력',
      'MMDD 형식으로 입력하세요 (예: 0807, 0808)\n' +
      '싸이버스카이와 EDI 모두 해당 날짜 데이터가 있어야 합니다.',
      ui.ButtonSet.OK_CANCEL
    );
    
    if (dateResponse.getSelectedButton() !== ui.Button.OK) {
      return;
    }
    
    targetDate = dateResponse.getResponseText().trim();
    if (!/^\d{4}$/.test(targetDate)) {
      ui.alert('❌ 잘못된 날짜 형식입니다. MMDD 형식으로 입력해주세요.');
      return;
    }
  }
  
  try {
    const cyberskyResult = targetDate
      ? CyberskyData.updateCyberskyDataForDate(targetDate)
      : CyberskyData.updateCyberskyData();
      
    const ediResult = targetDate
      ? EDIData.getEDIFromEmail(targetDate)
      : EDIData.updateEDIData();
    
    if (cyberskyResult.success && ediResult.success) {
      // 데이터 처리 실행
      const processResult = DataProcessor.processData();
      if (processResult.success) {
        ui.alert('✅ 모든 데이터 업데이트 및 처리 완료!\n' +
                 (targetDate ? `날짜: ${targetDate}` : '날짜: 오늘'));
      } else {
        throw new Error('데이터 처리 실패: ' + processResult.error);
      }
    } else {
      let errors = [];
      if (!cyberskyResult.success) errors.push('싸이버스카이: ' + cyberskyResult.error);
      if (!ediResult.success) errors.push('EDI: ' + ediResult.error);
      throw new Error(errors.join('\n'));
    }
  } catch (error) {
    ui.alert('❌ 오류: ' + error.toString());
  }
}

/**
 * 검산 실행
 */
function runVerification() {
  // 설정 초기화
  initializeConfig();
  
  try {
    const result = Verification.runVerification();
    const ui = SpreadsheetApp.getUi();
    
    if (result.success) {
      ui.alert('✅ 검산 완료!\n\n' + result.message);
    } else {
      ui.alert('⚠️ 검산 실패!\n\n' + result.message);
    }
  } catch (error) {
    SpreadsheetApp.getUi().alert('❌ 오류: ' + error.toString());
  }
}

/**
 * 품목별 시트 분리
 */
function splitByProduct() {
  // 설정 초기화
  initializeConfig();
  
  try {
    const result = ProductSplitter.splitByProduct();
    if (result.success) {
      SpreadsheetApp.getUi().alert('✅ 품목별 시트 분리 완료!\n생성된 시트: ' + result.sheets.join(', '));
    } else {
      throw new Error(result.error);
    }
  } catch (error) {
    SpreadsheetApp.getUi().alert('❌ 오류: ' + error.toString());
  }
}

/**
 * 데이터 처리 실행
 */
function runDataProcessor() {
  // 설정 초기화
  initializeConfig();
  
  try {
    const result = DataProcessor.processData();
    if (result.success) {
      SpreadsheetApp.getUi().alert('✅ 데이터 처리 완료!\n처리된 행: ' + result.processedRows);
    } else {
      throw new Error(result.error);
    }
  } catch (error) {
    SpreadsheetApp.getUi().alert('❌ 오류: ' + error.toString());
  }
}

/**
 * 쿠팡 데이터 업로더 열기
 */
function openCoupangUploader() {
  const html = HtmlService.createHtmlOutputFromFile('CoupangUploader')
    .setWidth(600)
    .setHeight(400)
    .setTitle('쿠팡 데이터 업로더');
  SpreadsheetApp.getUi().showModalDialog(html, '쿠팡 데이터 업로더');
}

/**
 * 로컬 엑셀 업로더 열기
 */
function openLocalExcelUploader() {
  const html = HtmlService.createHtmlOutputFromFile('ExcelUploaderDialog')
    .setWidth(950)
    .setHeight(700)
    .setTitle('로컬 엑셀 업로더');
  SpreadsheetApp.getUi().showModalDialog(html, '로컬 엑셀 업로더');
}

/**
 * 품목별 다운로더 열기
 */
function openProductDownloader() {
  const html = HtmlService.createHtmlOutputFromFile('ProductDownloaderDialog')
    .setWidth(850)
    .setHeight(650)
    .setTitle('품목별 다운로더');
  SpreadsheetApp.getUi().showModalDialog(html, '품목별 다운로더');
}

/**
 * 이메일 전송기 열기
 */
function openEmailSender() {
  const html = HtmlService.createHtmlOutputFromFile('EmailSenderDialog')
    .setWidth(750)
    .setHeight(700)
    .setTitle('이메일 전송기');
  SpreadsheetApp.getUi().showModalDialog(html, '이메일 전송기');
}

/**
 * 드라이브 탐색기 열기
 */
function openDriveExplorer() {
  DriveExplorer.openExplorer();
}

/**
 * 설정 다이얼로그 열기
 */
function openSettings() {
  const html = HtmlService.createHtmlOutputFromFile('Settings')
    .setWidth(500)
    .setHeight(400)
    .setTitle('설정');
  SpreadsheetApp.getUi().showModalDialog(html, '곰탕 출고 자동화 설정');
}

/**
 * 테스트 함수들 - TestFunctions.gs로 위임
 */
function testCyberskyByDate() {
  TestFunctions.testCyberskyByDate();
}

function testEDIByDate() {
  TestFunctions.testEDIByDate();
}

function testFullProcessByDate() {
  TestFunctions.testFullProcessByDate();
}

function testGetRecentEDI() {
  TestFunctions.testGetRecentEDI();
}

function testDailyUpdate() {
  // Triggers.gs의 함수 호출
  dailyUpdate();
  SpreadsheetApp.getUi().alert('테스트 실행 완료!\n업데이트_로그 시트에서 결과를 확인하세요.');
}

function cleanTestSheets() {
  TestFunctions.cleanTestSheets();
}


/**
 * 템플릿 시트 초기화
 */
function clearTemplates() {
  const ui = SpreadsheetApp.getUi();
  const response = ui.alert(
    '⚠️ 템플릿 초기화',
    '샘플로 시작하는 모든 시트를 삭제하시겠습니까?\n(샘플 시트, 설명서 등이 모두 삭제됩니다)',
    ui.ButtonSet.YES_NO
  );
  
  if (response === ui.Button.YES) {
    try {
      const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
      const sheets = spreadsheet.getSheets();
      let deletedCount = 0;
      
      for (const sheet of sheets) {
        const name = sheet.getName();
        if (name.startsWith('샘플') || name.includes('설명') || name.includes('템플릿')) {
          spreadsheet.deleteSheet(sheet);
          deletedCount++;
        }
      }
      
      ui.alert(`✅ ${deletedCount}개의 템플릿 시트를 삭제했습니다.`);
    } catch (error) {
      ui.alert('❌ 초기화 실패: ' + error.toString());
    }
  }
}

/**
 * 오늘 날짜를 YYYYMMDD 형식으로 반환
 */
function getTodayDate() {
  const today = new Date();
  const year = today.getFullYear();
  const month = String(today.getMonth() + 1).padStart(2, '0');
  const day = String(today.getDate()).padStart(2, '0');
  return year + month + day;
}

/**
 * 오늘 날짜를 YYMM 형식으로 반환
 */
function getTodayShortDate() {
  const today = new Date();
  const month = String(today.getMonth() + 1).padStart(2, '0');
  const day = String(today.getDate()).padStart(2, '0');
  return month + day;
}

/**
 * MMDD를 YYYYMMDD로 변환
 */
function convertToFullDate(shortDate) {
  if (shortDate.length === 8) {
    return shortDate; // 이미 YYYYMMDD 형식
  }
  
  const year = new Date().getFullYear();
  return year + shortDate;
}

/**
 * 설정 저장
 */
function saveSettings(settings) {
  try {
    const scriptProperties = PropertiesService.getScriptProperties();
    scriptProperties.setProperty('SOURCE_SPREADSHEET_ID', settings.sourceSpreadsheetId);
    scriptProperties.setProperty('FOLDER_ID', settings.folderId);
    scriptProperties.setProperty('SENDER_POSTAL_CODE', settings.senderPostal);
    scriptProperties.setProperty('SENDER_ADDRESS', settings.senderAddress);
    
    // CONFIG 객체 업데이트
    CONFIG.SOURCE_SPREADSHEET_ID = settings.sourceSpreadsheetId;
    CONFIG.FOLDER_ID = settings.folderId;
    CONFIG.SENDER_POSTAL_CODE = settings.senderPostal;
    CONFIG.SENDER_ADDRESS = settings.senderAddress;
    
    return { success: true };
  } catch (error) {
    return { success: false, error: error.toString() };
  }
}

/**
 * 설정 불러오기
 */
function getSettings() {
  const scriptProperties = PropertiesService.getScriptProperties();
  return {
    sourceSpreadsheetId: scriptProperties.getProperty('SOURCE_SPREADSHEET_ID') || CONFIG.SOURCE_SPREADSHEET_ID,
    folderId: scriptProperties.getProperty('FOLDER_ID') || CONFIG.FOLDER_ID,
    senderPostal: scriptProperties.getProperty('SENDER_POSTAL_CODE') || CONFIG.SENDER_POSTAL_CODE,
    senderAddress: scriptProperties.getProperty('SENDER_ADDRESS') || CONFIG.SENDER_ADDRESS
  };
}

/**
 * 스크립트 초기화 시 설정 로드
 */
function initializeConfig() {
  const settings = getSettings();
  CONFIG.SOURCE_SPREADSHEET_ID = settings.sourceSpreadsheetId;
  CONFIG.FOLDER_ID = settings.folderId;
  CONFIG.SENDER_POSTAL_CODE = settings.senderPostal;
  CONFIG.SENDER_ADDRESS = settings.senderAddress;
}

/**
 * 이메일 설정 시트 생성
 */
function createEmailSettingsSheet() {
  console.log('=== Function Start: createEmailSettingsSheet ===');
  
  try {
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const sheetName = '이메일_설정';
    
    // 기존 시트가 있는지 확인
    let emailSettingsSheet = spreadsheet.getSheetByName(sheetName);
    
    if (emailSettingsSheet) {
      const ui = SpreadsheetApp.getUi();
      const response = ui.alert(
        '⚠️ 시트 이미 존재',
        `'${sheetName}' 시트가 이미 존재합니다.\n\n기존 시트를 삭제하고 새로 만드시겠습니까?`,
        ui.ButtonSet.YES_NO
      );
      
      if (response === ui.Button.YES) {
        spreadsheet.deleteSheet(emailSettingsSheet);
        console.log('기존 이메일_설정 시트 삭제');
      } else {
        console.log('시트 생성 취소');
        return { success: false, error: '사용자가 취소했습니다.' };
      }
    }
    
    // 새 시트 생성
    emailSettingsSheet = spreadsheet.insertSheet(sheetName);
    console.log('새 이메일_설정 시트 생성');
    
    // 헤더 설정
    const headers = ['우선순위', '전송여부', '이름', '이메일', '메모'];
    emailSettingsSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    
    // 헤더 스타일링
    const headerRange = emailSettingsSheet.getRange(1, 1, 1, headers.length);
    headerRange.setBackground('#4285f4');
    headerRange.setFontColor('white');
    headerRange.setFontWeight('bold');
    headerRange.setHorizontalAlignment('center');
    
    // 샘플 데이터 추가
    const sampleData = [
      [1, 'TRUE', '김영준', 'example1@company.com', '담당자'],
      [2, 'FALSE', '홍길동', 'example2@company.com', '백업 담당자'],
      [3, 'TRUE', '이순신', 'example3@company.com', '관리자']
    ];
    
    emailSettingsSheet.getRange(2, 1, sampleData.length, headers.length).setValues(sampleData);
    
    // 열 너비 조정
    emailSettingsSheet.setColumnWidth(1, 80);  // 우선순위
    emailSettingsSheet.setColumnWidth(2, 80);  // 전송여부
    emailSettingsSheet.setColumnWidth(3, 100); // 이름
    emailSettingsSheet.setColumnWidth(4, 200); // 이메일
    emailSettingsSheet.setColumnWidth(5, 150); // 메모
    
    // 우선순위 열에 숫자 검증 추가
    const priorityRange = emailSettingsSheet.getRange(2, 1, 1000, 1); // A2:A1001
    const priorityValidation = SpreadsheetApp.newDataValidation()
      .requireNumberGreaterThan(0)
      .setAllowInvalid(false)
      .build();
    priorityRange.setDataValidation(priorityValidation);
    
    // 전송여부 열에 데이터 검증 추가 (TRUE/FALSE 드롭다운)
    const validationRange = emailSettingsSheet.getRange(2, 2, 1000, 1); // B2:B1001
    const validation = SpreadsheetApp.newDataValidation()
      .requireValueInList(['TRUE', 'FALSE'])
      .setAllowInvalid(false)
      .build();
    validationRange.setDataValidation(validation);
    
    // 테두리 추가
    const dataRange = emailSettingsSheet.getRange(1, 1, sampleData.length + 1, headers.length);
    dataRange.setBorder(true, true, true, true, true, true);
    
    // 시트 활성화
    emailSettingsSheet.activate();
    
    // 사용자에게 안내 메시지
    const ui = SpreadsheetApp.getUi();
    ui.alert(
      '✅ 이메일 설정 시트 생성 완료',
      `'${sheetName}' 시트가 성공적으로 생성되었습니다.\n\n` +
      '• 우선순위: 숫자가 작을수록 높은 우선순위입니다\n' +
      '• 전송여부: TRUE로 설정된 사용자만 이메일을 받습니다\n' +
      '• 샘플 데이터는 실제 데이터로 수정해주세요',
      ui.ButtonSet.OK
    );
    
    console.log('=== Function End: createEmailSettingsSheet SUCCESS ===');
    return { success: true, message: '이메일 설정 시트가 생성되었습니다.' };
    
  } catch (error) {
    console.error('ERROR in createEmailSettingsSheet:', error.toString());
    console.log('=== Function End: createEmailSettingsSheet FAILED ===');
    
    const ui = SpreadsheetApp.getUi();
    ui.alert(
      '❌ 시트 생성 실패',
      `이메일 설정 시트 생성에 실패했습니다:\n\n${error.toString()}`,
      ui.ButtonSet.OK
    );
    
    return { success: false, error: error.toString() };
  }
}
