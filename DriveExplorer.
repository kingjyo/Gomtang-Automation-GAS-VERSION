<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f5f5f5;
      height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: linear-gradient(135deg, #4285f4 0%, #34a853 100%);
      color: white;
      padding: 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .header h2 {
      font-size: 24px;
      margin-bottom: 10px;
    }
    
    .header p {
      opacity: 0.9;
      font-size: 14px;
    }
    
    .container {
      display: flex;
      flex: 1;
      overflow: hidden;
    }
    
    .left-panel {
      width: 250px;
      background: white;
      border-right: 1px solid #e0e0e0;
      display: flex;
      flex-direction: column;
    }
    
    .current-selection {
      padding: 15px;
      background: #f8f9fa;
      border-bottom: 1px solid #e0e0e0;
    }
    
    .current-selection h3 {
      font-size: 14px;
      color: #5f6368;
      margin-bottom: 10px;
    }
    
    .selection-item {
      padding: 8px;
      background: white;
      border: 1px solid #dadce0;
      border-radius: 4px;
      margin-bottom: 8px;
      font-size: 13px;
    }
    
    .selection-item.empty {
      color: #999;
      font-style: italic;
    }
    
    .selection-item.selected {
      background: #e8f0fe;
      border-color: #4285f4;
      color: #1967d2;
    }
    
    .root-folders {
      flex: 1;
      overflow-y: auto;
      padding: 10px;
    }
    
    .root-item {
      padding: 10px 15px;
      cursor: pointer;
      border-radius: 8px;
      margin-bottom: 5px;
      transition: all 0.2s;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .root-item:hover {
      background: #f1f3f4;
    }
    
    .root-item.active {
      background: #e8f0fe;
      color: #1967d2;
    }
    
    .main-panel {
      flex: 1;
      display: flex;
      flex-direction: column;
      background: white;
    }
    
    .toolbar {
      padding: 15px;
      background: #fff;
      border-bottom: 1px solid #e0e0e0;
      display: flex;
      gap: 10px;
      align-items: center;
    }
    
    .breadcrumb {
      flex: 1;
      display: flex;
      align-items: center;
      gap: 5px;
      font-size: 14px;
      color: #5f6368;
      overflow-x: auto;
      white-space: nowrap;
    }
    
    .breadcrumb-item {
      cursor: pointer;
      padding: 4px 8px;
      border-radius: 4px;
      transition: background 0.2s;
    }
    
    .breadcrumb-item:hover {
      background: #f1f3f4;
    }
    
    .breadcrumb-separator {
      color: #9aa0a6;
    }
    
    .search-box {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 0 15px;
      background: #f8f9fa;
      border-bottom: 1px solid #e0e0e0;
    }
    
    .search-input {
      flex: 1;
      padding: 10px 15px;
      border: 1px solid #dadce0;
      border-radius: 24px;
      font-size: 14px;
      margin: 10px 0;
    }
    
    .search-input:focus {
      outline: none;
      border-color: #4285f4;
    }
    
    .filter-buttons {
      display: flex;
      gap: 5px;
    }
    
    .filter-btn {
      padding: 6px 12px;
      border: 1px solid #dadce0;
      background: white;
      border-radius: 16px;
      font-size: 13px;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    .filter-btn:hover {
      background: #f1f3f4;
    }
    
    .filter-btn.active {
      background: #4285f4;
      color: white;
      border-color: #4285f4;
    }
    
    .file-list {
      flex: 1;
      overflow-y: auto;
      padding: 15px;
    }
    
    .file-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 10px;
    }
    
    .file-item {
      padding: 12px 15px;
      border: 1px solid #dadce0;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s;
      display: flex;
      align-items: center;
      gap: 12px;
      background: white;
    }
    
    .file-item:hover {
      border-color: #4285f4;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      transform: translateY(-1px);
    }
    
    .file-item.selected {
      background: #e8f0fe;
      border-color: #4285f4;
    }
    
    .file-item.folder {
      background: #fafafa;
    }
    
    .file-icon {
      font-size: 24px;
      width: 30px;
      text-align: center;
    }
    
    .file-info {
      flex: 1;
      min-width: 0;
    }
    
    .file-name {
      font-size: 14px;
      font-weight: 500;
      color: #202124;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .file-date {
      font-size: 12px;
      color: #5f6368;
      margin-top: 2px;
    }
    
    .footer {
      padding: 15px 20px;
      background: #f8f9fa;
      border-top: 1px solid #e0e0e0;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .footer-info {
      font-size: 13px;
      color: #5f6368;
    }
    
    .footer-buttons {
      display: flex;
      gap: 10px;
    }
    
    button {
      padding: 8px 20px;
      border: none;
      border-radius: 4px;
      font-size: 14px;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    .btn-primary {
      background: #4285f4;
      color: white;
    }
    
    .btn-primary:hover {
      background: #357ae8;
    }
    
    .btn-primary:disabled {
      background: #9aa0a6;
      cursor: not-allowed;
    }
    
    .btn-secondary {
      background: white;
      border: 1px solid #dadce0;
      color: #5f6368;
    }
    
    .btn-secondary:hover {
      background: #f8f9fa;
    }
    
    .loading {
      display: none;
      text-align: center;
      padding: 40px;
      color: #5f6368;
    }
    
    .loading.show {
      display: block;
    }
    
    .spinner {
      border: 3px solid #f3f3f3;
      border-top: 3px solid #4285f4;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
      margin: 0 auto 20px;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .empty-state {
      text-align: center;
      padding: 60px 20px;
      color: #5f6368;
    }
    
    .empty-state-icon {
      font-size: 64px;
      margin-bottom: 20px;
      opacity: 0.3;
    }
    
    .create-folder-btn {
      padding: 8px 16px;
      background: #34a853;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 13px;
    }
    
    .create-folder-btn:hover {
      background: #2d8e47;
    }
    
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0,0,0,0.5);
      align-items: center;
      justify-content: center;
      z-index: 1000;
    }
    
    .modal.show {
      display: flex;
    }
    
    .modal-content {
      background: white;
      border-radius: 8px;
      padding: 24px;
      min-width: 400px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.2);
    }
    
    .modal-title {
      font-size: 18px;
      margin-bottom: 20px;
    }
    
    .modal-input {
      width: 100%;
      padding: 10px;
      border: 1px solid #dadce0;
      border-radius: 4px;
      font-size: 14px;
      margin-bottom: 20px;
    }
    
    .modal-buttons {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
    }
  </style>
</head>
<body>
  <div class="header">
    <h2>📁 드라이브 탐색기</h2>
    <p>스프레드시트와 저장 폴더를 선택하세요</p>
  </div>
  
  <div class="container">
    <div class="left-panel">
      <div class="current-selection">
        <h3>현재 선택</h3>
        <div class="selection-item" id="selectedSpreadsheet">
          <strong>📊 스프레드시트:</strong><br>
          <span class="empty">선택되지 않음</span>
        </div>
        <div class="selection-item" id="selectedFolder">
          <strong>📁 저장 폴더:</strong><br>
          <span class="empty">선택되지 않음</span>
        </div>
      </div>
      
      <div class="root-folders" id="rootFolders">
        <!-- 루트 폴더 목록 -->
      </div>
    </div>
    
    <div class="main-panel">
      <div class="toolbar">
        <div class="breadcrumb" id="breadcrumb">
          <!-- 경로 표시 -->
        </div>
        <button class="create-folder-btn" onclick="showCreateFolderModal()">
          ➕ 새 폴더
        </button>
      </div>
      
      <div class="search-box">
        <input type="text" class="search-input" id="searchInput" 
               placeholder="🔍 스프레드시트 검색..." 
               onkeyup="handleSearch(event)">
        <div class="filter-buttons">
          <button class="filter-btn active" onclick="setFilter('all')">전체</button>
          <button class="filter-btn" onclick="setFilter('folders')">폴더만</button>
          <button class="filter-btn" onclick="setFilter('spreadsheets')">스프레드시트만</button>
        </div>
      </div>
      
      <div class="file-list">
        <div class="loading" id="loading">
          <div class="spinner"></div>
          <div>불러오는 중...</div>
        </div>
        
        <div class="file-grid" id="fileGrid">
          <!-- 파일 목록 -->
        </div>
        
        <div class="empty-state" id="emptyState" style="display: none;">
          <div class="empty-state-icon">📭</div>
          <div>폴더가 비어있습니다</div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="footer">
    <div class="footer-info" id="footerInfo">
      시작하려면 왼쪽에서 드라이브를 선택하세요
    </div>
    <div class="footer-buttons">
      <button class="btn-secondary" onclick="google.script.host.close()">취소</button>
      <button class="btn-primary" id="saveBtn" onclick="saveSelection()" disabled>
        저장하기
      </button>
    </div>
  </div>
  
  <!-- 새 폴더 생성 모달 -->
  <div class="modal" id="createFolderModal">
    <div class="modal-content">
      <div class="modal-title">📁 새 폴더 만들기</div>
      <input type="text" class="modal-input" id="newFolderName" 
             placeholder="폴더 이름 입력..." onkeyup="if(event.key==='Enter') createFolder()">
      <div class="modal-buttons">
        <button class="btn-secondary" onclick="hideCreateFolderModal()">취소</button>
        <button class="btn-primary" onclick="createFolder()">만들기</button>
      </div>
    </div>
  </div>
  
  <script>
    let currentPath = [];
    let currentFilter = 'all';
    let selectedSpreadsheet = null;
    let selectedFolder = null;
    let currentFolderId = null;
    
    // 초기화
    window.onload = function() {
      loadRootFolders();
      loadCurrentSettings();
    };
    
    // 현재 설정 불러오기
    function loadCurrentSettings() {
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success && result.settings) {
            if (result.settings.spreadsheetId && result.settings.spreadsheetName) {
              selectedSpreadsheet = {
                id: result.settings.spreadsheetId,
                name: result.settings.spreadsheetName
              };
              updateSelectedSpreadsheet();
            }
            if (result.settings.folderId && result.settings.folderName) {
              selectedFolder = {
                id: result.settings.folderId,
                name: result.settings.folderName
              };
              updateSelectedFolder();
            }
            updateSaveButton();
          }
        })
        .DriveExplorer.getCurrentSettings();
    }
    
    // 루트 폴더 불러오기
    function loadRootFolders() {
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            displayRootFolders(result.items);
          }
        })
        .DriveExplorer.getRootFolders();
    }
    
    // 루트 폴더 표시
    function displayRootFolders(folders) {
      const container = document.getElementById('rootFolders');
      container.innerHTML = '';
      
      folders.forEach(folder => {
        const item = document.createElement('div');
        item.className = 'root-item';
        item.innerHTML = `
          <span style="font-size: 20px;">${folder.icon}</span>
          <span>${folder.name}</span>
        `;
        item.onclick = () => navigateToFolder(folder.id, folder.name);
        container.appendChild(item);
      });
    }
    
    // 폴더 탐색
    function navigateToFolder(folderId, folderName) {
      showLoading();
      currentFolderId = folderId;
      
      // 루트 폴더 활성화 표시
      document.querySelectorAll('.root-item').forEach(item => {
        item.classList.remove('active');
        if (item.textContent.includes(folderName)) {
          item.classList.add('active');
        }
      });
      
      // 경로 업데이트
      if (folderId === 'root' || folderId === 'sharedWithMe' || folderId === 'recent') {
        currentPath = [{id: folderId, name: folderName}];
      } else {
        // 경로 가져오기는 나중에
        currentPath = [{id: folderId, name: folderName}];
      }
      updateBreadcrumb();
      
      // 폴더 내용 불러오기
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          if (result.success) {
            displayFiles(result.items);
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          alert('폴더를 열 수 없습니다: ' + error);
        })
        .DriveExplorer.getFolderContents(folderId, currentFilter);
    }
    
    // 파일 목록 표시
    function displayFiles(files) {
      const grid = document.getElementById('fileGrid');
      const emptyState = document.getElementById('emptyState');
      
      if (files.length === 0) {
        grid.innerHTML = '';
        emptyState.style.display = 'block';
        updateFooterInfo('항목 없음');
        return;
      }
      
      emptyState.style.display = 'none';
      grid.innerHTML = '';
      
      files.forEach(file => {
        const item = document.createElement('div');
        item.className = 'file-item';
        if (file.type === 'folder') {
          item.className += ' folder';
        }
        
        const date = file.modifiedTime ? new Date(file.modifiedTime).toLocaleDateString() : '';
        
        item.innerHTML = `
          <div class="file-icon">${file.icon}</div>
          <div class="file-info">
            <div class="file-name">${file.name}</div>
            <div class="file-date">${date}</div>
          </div>
        `;
        
        if (file.type === 'folder') {
          item.ondblclick = () => navigateToFolder(file.id, file.name);
          item.onclick = () => selectFolder(file);
        } else if (file.type === 'spreadsheet') {
          item.onclick = () => selectSpreadsheet(file);
        }
        
        grid.appendChild(item);
      });
      
      updateFooterInfo(`${files.length}개 항목`);
    }
    
    // 스프레드시트 선택
    function selectSpreadsheet(file) {
      selectedSpreadsheet = file;
      updateSelectedSpreadsheet();
      
      // 선택 표시
      document.querySelectorAll('.file-item').forEach(item => {
        item.classList.remove('selected');
        if (item.querySelector('.file-name').textContent === file.name) {
          item.classList.add('selected');
        }
      });
      
      updateSaveButton();
    }
    
    // 폴더 선택
    function selectFolder(file) {
      selectedFolder = file;
      updateSelectedFolder();
      
      // 선택 표시
      document.querySelectorAll('.file-item').forEach(item => {
        item.classList.remove('selected');
        if (item.querySelector('.file-name').textContent === file.name) {
          item.classList.add('selected');
        }
      });
      
      updateSaveButton();
    }
    
    // 선택된 스프레드시트 업데이트
    function updateSelectedSpreadsheet() {
      const element = document.getElementById('selectedSpreadsheet');
      if (selectedSpreadsheet) {
        element.innerHTML = `
          <strong>📊 스프레드시트:</strong><br>
          ${selectedSpreadsheet.name}
        `;
        element.classList.add('selected');
      }
    }
    
    // 선택된 폴더 업데이트
    function updateSelectedFolder() {
      const element = document.getElementById('selectedFolder');
      if (selectedFolder) {
        element.innerHTML = `
          <strong>📁 저장 폴더:</strong><br>
          ${selectedFolder.name}
        `;
        element.classList.add('selected');
      }
    }
    
    // 저장 버튼 업데이트
    function updateSaveButton() {
      const saveBtn = document.getElementById('saveBtn');
      saveBtn.disabled = !(selectedSpreadsheet && selectedFolder);
    }
    
    // 경로 표시 업데이트
    function updateBreadcrumb() {
      const breadcrumb = document.getElementById('breadcrumb');
      breadcrumb.innerHTML = '';
      
      currentPath.forEach((item, index) => {
        const span = document.createElement('span');
        span.className = 'breadcrumb-item';
        span.textContent = item.name;
        span.onclick = () => {
          if (index < currentPath.length - 1) {
            navigateToFolder(item.id, item.name);
          }
        };
        breadcrumb.appendChild(span);
        
        if (index < currentPath.length - 1) {
          const separator = document.createElement('span');
          separator.className = 'breadcrumb-separator';
          separator.textContent = ' › ';
          breadcrumb.appendChild(separator);
        }
      });
    }
    
    // 필터 설정
    function setFilter(filter) {
      currentFilter = filter;
      
      // 버튼 활성화 상태 변경
      document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      event.target.classList.add('active');
      
      // 현재 폴더 다시 불러오기
      if (currentFolderId) {
        navigateToFolder(currentFolderId, currentPath[currentPath.length - 1].name);
      }
    }
    
    // 검색
    function handleSearch(event) {
      if (event.key === 'Enter') {
        const searchTerm = document.getElementById('searchInput').value;
        if (searchTerm.length > 0) {
          searchSpreadsheets(searchTerm);
        }
      }
    }
    
    // 스프레드시트 검색
    function searchSpreadsheets(searchTerm) {
      showLoading();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          if (result.success) {
            displayFiles(result.items);
            updateFooterInfo(`검색 결과: ${result.items.length}개`);
          }
        })
        .DriveExplorer.searchSpreadsheets(searchTerm);
    }
    
    // 새 폴더 모달 표시
    function showCreateFolderModal() {
      if (!currentFolderId || currentFolderId === 'recent' || currentFolderId === 'sharedWithMe') {
        alert('이 위치에는 폴더를 만들 수 없습니다.');
        return;
      }
      document.getElementById('createFolderModal').classList.add('show');
      document.getElementById('newFolderName').focus();
    }
    
    // 새 폴더 모달 숨기기
    function hideCreateFolderModal() {
      document.getElementById('createFolderModal').classList.remove('show');
      document.getElementById('newFolderName').value = '';
    }
    
    // 폴더 생성
    function createFolder() {
      const folderName = document.getElementById('newFolderName').value.trim();
      if (!folderName) {
        alert('폴더 이름을 입력하세요.');
        return;
      }
      
      showLoading();
      hideCreateFolderModal();
      
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            // 현재 폴더 새로고침
            navigateToFolder(currentFolderId, currentPath[currentPath.length - 1].name);
          } else {
            hideLoading();
            alert('폴더 생성 실패: ' + result.error);
          }
        })
        .DriveExplorer.createFolder(currentFolderId, folderName);
    }
    
    // 선택 저장
    function saveSelection() {
      if (!selectedSpreadsheet || !selectedFolder) {
        alert('스프레드시트와 폴더를 모두 선택해주세요.');
        return;
      }
      
      showLoading();
      
      const selection = {
        spreadsheetId: selectedSpreadsheet.id,
        spreadsheetName: selectedSpreadsheet.name,
        folderId: selectedFolder.id,
        folderName: selectedFolder.name
      };
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          if (result.success) {
            alert('✅ 설정이 저장되었습니다!');
            google.script.host.close();
          } else {
            alert('저장 실패: ' + result.error);
          }
        })
        .DriveExplorer.saveSelection(selection);
    }
    
    // 로딩 표시
    function showLoading() {
      document.getElementById('loading').classList.add('show');
    }
    
    // 로딩 숨기기
    function hideLoading() {
      document.getElementById('loading').classList.remove('show');
    }
    
    // 푸터 정보 업데이트
    function updateFooterInfo(text) {
      document.getElementById('footerInfo').textContent = text;
    }
  </script>
</body>
</html>
